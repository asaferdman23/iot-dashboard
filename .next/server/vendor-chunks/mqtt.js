/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mqtt";
exports.ids = ["vendor-chunks/mqtt"];
exports.modules = {

/***/ "(ssr)/./node_modules/mqtt/build/lib/TypedEmitter.js":
/*!*****************************************************!*\
  !*** ./node_modules/mqtt/build/lib/TypedEmitter.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TypedEventEmitter = void 0;\nconst events_1 = __importDefault(__webpack_require__(/*! events */ \"events\"));\nconst shared_1 = __webpack_require__(/*! ./shared */ \"(ssr)/./node_modules/mqtt/build/lib/shared.js\");\nclass TypedEventEmitter {\n}\nexports.TypedEventEmitter = TypedEventEmitter;\n(0, shared_1.applyMixin)(TypedEventEmitter, events_1.default);\n//# sourceMappingURL=TypedEmitter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvVHlwZWRFbWl0dGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUJBQXlCO0FBQ3pCLGlDQUFpQyxtQkFBTyxDQUFDLHNCQUFRO0FBQ2pELGlCQUFpQixtQkFBTyxDQUFDLCtEQUFVO0FBQ25DO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9UeXBlZEVtaXR0ZXIuanM/ODFiNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuVHlwZWRFdmVudEVtaXR0ZXIgPSB2b2lkIDA7XG5jb25zdCBldmVudHNfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZXZlbnRzXCIpKTtcbmNvbnN0IHNoYXJlZF8xID0gcmVxdWlyZShcIi4vc2hhcmVkXCIpO1xuY2xhc3MgVHlwZWRFdmVudEVtaXR0ZXIge1xufVxuZXhwb3J0cy5UeXBlZEV2ZW50RW1pdHRlciA9IFR5cGVkRXZlbnRFbWl0dGVyO1xuKDAsIHNoYXJlZF8xLmFwcGx5TWl4aW4pKFR5cGVkRXZlbnRFbWl0dGVyLCBldmVudHNfMS5kZWZhdWx0KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVR5cGVkRW1pdHRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/TypedEmitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/client.js":
/*!***********************************************!*\
  !*** ./node_modules/mqtt/build/lib/client.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst topic_alias_recv_1 = __importDefault(__webpack_require__(/*! ./topic-alias-recv */ \"(ssr)/./node_modules/mqtt/build/lib/topic-alias-recv.js\"));\nconst mqtt_packet_1 = __importDefault(__webpack_require__(/*! mqtt-packet */ \"(ssr)/./node_modules/mqtt-packet/mqtt.js\"));\nconst default_message_id_provider_1 = __importDefault(__webpack_require__(/*! ./default-message-id-provider */ \"(ssr)/./node_modules/mqtt/build/lib/default-message-id-provider.js\"));\nconst readable_stream_1 = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\nconst reinterval_1 = __importDefault(__webpack_require__(/*! reinterval */ \"(ssr)/./node_modules/reinterval/index.js\"));\nconst default_1 = __importDefault(__webpack_require__(/*! rfdc/default */ \"(ssr)/./node_modules/rfdc/default.js\"));\nconst validations = __importStar(__webpack_require__(/*! ./validations */ \"(ssr)/./node_modules/mqtt/build/lib/validations.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst store_1 = __importDefault(__webpack_require__(/*! ./store */ \"(ssr)/./node_modules/mqtt/build/lib/store.js\"));\nconst handlers_1 = __importDefault(__webpack_require__(/*! ./handlers */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/index.js\"));\nconst TypedEmitter_1 = __webpack_require__(/*! ./TypedEmitter */ \"(ssr)/./node_modules/mqtt/build/lib/TypedEmitter.js\");\nconst nextTick = process\n    ? process.nextTick\n    : (callback) => {\n        setTimeout(callback, 0);\n    };\nconst setImmediate = global.setImmediate ||\n    ((...args) => {\n        const callback = args.shift();\n        nextTick(() => {\n            callback(...args);\n        });\n    });\nconst defaultConnectOptions = {\n    keepalive: 60,\n    reschedulePings: true,\n    protocolId: 'MQTT',\n    protocolVersion: 4,\n    reconnectPeriod: 1000,\n    connectTimeout: 30 * 1000,\n    clean: true,\n    resubscribe: true,\n    writeCache: true,\n};\nconst socketErrors = [\n    'ECONNREFUSED',\n    'EADDRINUSE',\n    'ECONNRESET',\n    'ENOTFOUND',\n    'ETIMEDOUT',\n];\nclass MqttClient extends TypedEmitter_1.TypedEventEmitter {\n    static defaultId() {\n        return `mqttjs_${Math.random().toString(16).substr(2, 8)}`;\n    }\n    constructor(streamBuilder, options) {\n        super();\n        this.options = options || {};\n        for (const k in defaultConnectOptions) {\n            if (typeof this.options[k] === 'undefined') {\n                this.options[k] = defaultConnectOptions[k];\n            }\n            else {\n                this.options[k] = options[k];\n            }\n        }\n        this.log = this.options.log || (0, debug_1.default)('mqttjs:client');\n        this.noop = this._noop.bind(this);\n        this.log('MqttClient :: options.protocol', options.protocol);\n        this.log('MqttClient :: options.protocolVersion', options.protocolVersion);\n        this.log('MqttClient :: options.username', options.username);\n        this.log('MqttClient :: options.keepalive', options.keepalive);\n        this.log('MqttClient :: options.reconnectPeriod', options.reconnectPeriod);\n        this.log('MqttClient :: options.rejectUnauthorized', options.rejectUnauthorized);\n        this.log('MqttClient :: options.properties.topicAliasMaximum', options.properties\n            ? options.properties.topicAliasMaximum\n            : undefined);\n        this.options.clientId =\n            typeof options.clientId === 'string'\n                ? options.clientId\n                : MqttClient.defaultId();\n        this.log('MqttClient :: clientId', this.options.clientId);\n        this.options.customHandleAcks =\n            options.protocolVersion === 5 && options.customHandleAcks\n                ? options.customHandleAcks\n                : (...args) => {\n                    args[3](null, 0);\n                };\n        if (!this.options.writeCache) {\n            mqtt_packet_1.default.writeToStream.cacheNumbers = false;\n        }\n        this.streamBuilder = streamBuilder;\n        this.messageIdProvider =\n            typeof this.options.messageIdProvider === 'undefined'\n                ? new default_message_id_provider_1.default()\n                : this.options.messageIdProvider;\n        this.outgoingStore = options.outgoingStore || new store_1.default();\n        this.incomingStore = options.incomingStore || new store_1.default();\n        this.queueQoSZero =\n            options.queueQoSZero === undefined ? true : options.queueQoSZero;\n        this._resubscribeTopics = {};\n        this.messageIdToTopic = {};\n        this.pingTimer = null;\n        this.connected = false;\n        this.disconnecting = false;\n        this.queue = [];\n        this.connackTimer = null;\n        this.reconnectTimer = null;\n        this._storeProcessing = false;\n        this._packetIdsDuringStoreProcessing = {};\n        this._storeProcessingQueue = [];\n        this.outgoing = {};\n        this._firstConnection = true;\n        if (options.properties && options.properties.topicAliasMaximum > 0) {\n            if (options.properties.topicAliasMaximum > 0xffff) {\n                this.log('MqttClient :: options.properties.topicAliasMaximum is out of range');\n            }\n            else {\n                this.topicAliasRecv = new topic_alias_recv_1.default(options.properties.topicAliasMaximum);\n            }\n        }\n        this.on('connect', () => {\n            const { queue } = this;\n            const deliver = () => {\n                const entry = queue.shift();\n                this.log('deliver :: entry %o', entry);\n                let packet = null;\n                if (!entry) {\n                    this._resubscribe();\n                    return;\n                }\n                packet = entry.packet;\n                this.log('deliver :: call _sendPacket for %o', packet);\n                let send = true;\n                if (packet.messageId && packet.messageId !== 0) {\n                    if (!this.messageIdProvider.register(packet.messageId)) {\n                        send = false;\n                    }\n                }\n                if (send) {\n                    this._sendPacket(packet, (err) => {\n                        if (entry.cb) {\n                            entry.cb(err);\n                        }\n                        deliver();\n                    });\n                }\n                else {\n                    this.log('messageId: %d has already used. The message is skipped and removed.', packet.messageId);\n                    deliver();\n                }\n            };\n            this.log('connect :: sending queued packets');\n            deliver();\n        });\n        this.on('close', () => {\n            this.log('close :: connected set to `false`');\n            this.connected = false;\n            this.log('close :: clearing connackTimer');\n            clearTimeout(this.connackTimer);\n            this.log('close :: clearing ping timer');\n            if (this.pingTimer !== null) {\n                this.pingTimer.clear();\n                this.pingTimer = null;\n            }\n            if (this.topicAliasRecv) {\n                this.topicAliasRecv.clear();\n            }\n            this.log('close :: calling _setupReconnect');\n            this._setupReconnect();\n        });\n        if (!this.options.manualConnect) {\n            this.log('MqttClient :: setting up stream');\n            this.connect();\n        }\n    }\n    handleAuth(packet, callback) {\n        callback();\n    }\n    handleMessage(packet, callback) {\n        callback();\n    }\n    _nextId() {\n        return this.messageIdProvider.allocate();\n    }\n    getLastMessageId() {\n        return this.messageIdProvider.getLastAllocated();\n    }\n    connect() {\n        var _a;\n        const writable = new readable_stream_1.Writable();\n        const parser = mqtt_packet_1.default.parser(this.options);\n        let completeParse = null;\n        const packets = [];\n        this.log('connect :: calling method to clear reconnect');\n        this._clearReconnect();\n        this.log('connect :: using streamBuilder provided to client to create stream');\n        this.stream = this.streamBuilder(this);\n        parser.on('packet', (packet) => {\n            this.log('parser :: on packet push to packets array.');\n            packets.push(packet);\n        });\n        const work = () => {\n            this.log('work :: getting next packet in queue');\n            const packet = packets.shift();\n            if (packet) {\n                this.log('work :: packet pulled from queue');\n                (0, handlers_1.default)(this, packet, nextTickWork);\n            }\n            else {\n                this.log('work :: no packets in queue');\n                const done = completeParse;\n                completeParse = null;\n                this.log('work :: done flag is %s', !!done);\n                if (done)\n                    done();\n            }\n        };\n        const nextTickWork = () => {\n            if (packets.length) {\n                nextTick(work);\n            }\n            else {\n                const done = completeParse;\n                completeParse = null;\n                done();\n            }\n        };\n        writable._write = (buf, enc, done) => {\n            completeParse = done;\n            this.log('writable stream :: parsing buffer');\n            parser.parse(buf);\n            work();\n        };\n        const streamErrorHandler = (error) => {\n            this.log('streamErrorHandler :: error', error.message);\n            if (socketErrors.includes(error.code)) {\n                this.log('streamErrorHandler :: emitting error');\n                this.emit('error', error);\n            }\n            else {\n                this.noop(error);\n            }\n        };\n        this.log('connect :: pipe stream to writable stream');\n        this.stream.pipe(writable);\n        this.stream.on('error', streamErrorHandler);\n        this.stream.on('close', () => {\n            this.log('(%s)stream :: on close', this.options.clientId);\n            this._flushVolatile();\n            this.log('stream: emit close to MqttClient');\n            this.emit('close');\n        });\n        this.log('connect: sending packet `connect`');\n        const connectPacket = {\n            cmd: 'connect',\n            protocolId: this.options.protocolId,\n            protocolVersion: this.options.protocolVersion,\n            clean: this.options.clean,\n            clientId: this.options.clientId,\n            keepalive: this.options.keepalive,\n            username: this.options.username,\n            password: this.options.password,\n            properties: this.options.properties,\n        };\n        if (this.options.will) {\n            connectPacket.will = Object.assign(Object.assign({}, this.options.will), { payload: (_a = this.options.will) === null || _a === void 0 ? void 0 : _a.payload });\n        }\n        if (this.topicAliasRecv) {\n            if (!connectPacket.properties) {\n                connectPacket.properties = {};\n            }\n            if (this.topicAliasRecv) {\n                connectPacket.properties.topicAliasMaximum =\n                    this.topicAliasRecv.max;\n            }\n        }\n        this._writePacket(connectPacket);\n        parser.on('error', this.emit.bind(this, 'error'));\n        if (this.options.properties) {\n            if (!this.options.properties.authenticationMethod &&\n                this.options.properties.authenticationData) {\n                this.end(() => this.emit('error', new Error('Packet has no Authentication Method')));\n                return this;\n            }\n            if (this.options.properties.authenticationMethod &&\n                this.options.authPacket &&\n                typeof this.options.authPacket === 'object') {\n                const authPacket = Object.assign({ cmd: 'auth', reasonCode: 0 }, this.options.authPacket);\n                this._writePacket(authPacket);\n            }\n        }\n        this.stream.setMaxListeners(1000);\n        clearTimeout(this.connackTimer);\n        this.connackTimer = setTimeout(() => {\n            this.log('!!connectTimeout hit!! Calling _cleanUp with force `true`');\n            this._cleanUp(true);\n        }, this.options.connectTimeout);\n        return this;\n    }\n    publish(topic, message, opts, callback) {\n        this.log('publish :: message `%s` to topic `%s`', message, topic);\n        const { options } = this;\n        if (typeof opts === 'function') {\n            callback = opts;\n            opts = null;\n        }\n        opts = opts || {};\n        const defaultOpts = {\n            qos: 0,\n            retain: false,\n            dup: false,\n        };\n        opts = Object.assign(Object.assign({}, defaultOpts), opts);\n        const { qos, retain, dup, properties, cbStorePut } = opts;\n        if (this._checkDisconnecting(callback)) {\n            return this;\n        }\n        const publishProc = () => {\n            let messageId = 0;\n            if (qos === 1 || qos === 2) {\n                messageId = this._nextId();\n                if (messageId === null) {\n                    this.log('No messageId left');\n                    return false;\n                }\n            }\n            const packet = {\n                cmd: 'publish',\n                topic,\n                payload: message,\n                qos,\n                retain,\n                messageId,\n                dup,\n            };\n            if (options.protocolVersion === 5) {\n                packet.properties = properties;\n            }\n            this.log('publish :: qos', qos);\n            switch (qos) {\n                case 1:\n                case 2:\n                    this.outgoing[packet.messageId] = {\n                        volatile: false,\n                        cb: callback || this.noop,\n                    };\n                    this.log('MqttClient:publish: packet cmd: %s', packet.cmd);\n                    this._sendPacket(packet, undefined, cbStorePut);\n                    break;\n                default:\n                    this.log('MqttClient:publish: packet cmd: %s', packet.cmd);\n                    this._sendPacket(packet, callback, cbStorePut);\n                    break;\n            }\n            return true;\n        };\n        if (this._storeProcessing ||\n            this._storeProcessingQueue.length > 0 ||\n            !publishProc()) {\n            this._storeProcessingQueue.push({\n                invoke: publishProc,\n                cbStorePut: opts.cbStorePut,\n                callback,\n            });\n        }\n        return this;\n    }\n    publishAsync(topic, message, opts) {\n        return new Promise((resolve, reject) => {\n            this.publish(topic, message, opts, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    subscribe(topicObject, opts, callback) {\n        const version = this.options.protocolVersion;\n        if (typeof opts === 'function') {\n            callback = opts;\n        }\n        callback = callback || this.noop;\n        let resubscribe = false;\n        let topicsList = [];\n        if (typeof topicObject === 'string') {\n            topicObject = [topicObject];\n            topicsList = topicObject;\n        }\n        else if (Array.isArray(topicObject)) {\n            topicsList = topicObject;\n        }\n        else if (typeof topicObject === 'object') {\n            resubscribe = topicObject.resubscribe;\n            delete topicObject.resubscribe;\n            topicsList = Object.keys(topicObject);\n        }\n        const invalidTopic = validations.validateTopics(topicsList);\n        if (invalidTopic !== null) {\n            setImmediate(callback, new Error(`Invalid topic ${invalidTopic}`));\n            return this;\n        }\n        if (this._checkDisconnecting(callback)) {\n            this.log('subscribe: discconecting true');\n            return this;\n        }\n        const defaultOpts = {\n            qos: 0,\n        };\n        if (version === 5) {\n            defaultOpts.nl = false;\n            defaultOpts.rap = false;\n            defaultOpts.rh = 0;\n        }\n        opts = Object.assign(Object.assign({}, defaultOpts), opts);\n        const properties = opts.properties;\n        const subs = [];\n        const parseSub = (topic, subOptions) => {\n            subOptions = (subOptions || opts);\n            if (!Object.prototype.hasOwnProperty.call(this._resubscribeTopics, topic) ||\n                this._resubscribeTopics[topic].qos < subOptions.qos ||\n                resubscribe) {\n                const currentOpts = {\n                    topic,\n                    qos: subOptions.qos,\n                };\n                if (version === 5) {\n                    currentOpts.nl = subOptions.nl;\n                    currentOpts.rap = subOptions.rap;\n                    currentOpts.rh = subOptions.rh;\n                    currentOpts.properties = properties;\n                }\n                this.log('subscribe: pushing topic `%s` and qos `%s` to subs list', currentOpts.topic, currentOpts.qos);\n                subs.push(currentOpts);\n            }\n        };\n        if (Array.isArray(topicObject)) {\n            topicObject.forEach((topic) => {\n                this.log('subscribe: array topic %s', topic);\n                parseSub(topic);\n            });\n        }\n        else {\n            Object.keys(topicObject).forEach((topic) => {\n                this.log('subscribe: object topic %s, %o', topic, topicObject[topic]);\n                parseSub(topic, topicObject[topic]);\n            });\n        }\n        if (!subs.length) {\n            callback(null, []);\n            return this;\n        }\n        const subscribeProc = () => {\n            const messageId = this._nextId();\n            if (messageId === null) {\n                this.log('No messageId left');\n                return false;\n            }\n            const packet = {\n                cmd: 'subscribe',\n                subscriptions: subs,\n                messageId,\n            };\n            if (properties) {\n                packet.properties = properties;\n            }\n            if (this.options.resubscribe) {\n                this.log('subscribe :: resubscribe true');\n                const topics = [];\n                subs.forEach((sub) => {\n                    if (this.options.reconnectPeriod > 0) {\n                        const topic = { qos: sub.qos };\n                        if (version === 5) {\n                            topic.nl = sub.nl || false;\n                            topic.rap = sub.rap || false;\n                            topic.rh = sub.rh || 0;\n                            topic.properties = sub.properties;\n                        }\n                        this._resubscribeTopics[sub.topic] = topic;\n                        topics.push(sub.topic);\n                    }\n                });\n                this.messageIdToTopic[packet.messageId] = topics;\n            }\n            this.outgoing[packet.messageId] = {\n                volatile: true,\n                cb(err, packet2) {\n                    if (!err) {\n                        const { granted } = packet2;\n                        for (let i = 0; i < granted.length; i += 1) {\n                            subs[i].qos = granted[i];\n                        }\n                    }\n                    callback(err, subs);\n                },\n            };\n            this.log('subscribe :: call _sendPacket');\n            this._sendPacket(packet);\n            return true;\n        };\n        if (this._storeProcessing ||\n            this._storeProcessingQueue.length > 0 ||\n            !subscribeProc()) {\n            this._storeProcessingQueue.push({\n                invoke: subscribeProc,\n                callback,\n            });\n        }\n        return this;\n    }\n    subscribeAsync(topicObject, opts) {\n        return new Promise((resolve, reject) => {\n            this.subscribe(topicObject, opts, (err, granted) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve(granted);\n                }\n            });\n        });\n    }\n    unsubscribe(topic, opts, callback) {\n        if (typeof topic === 'string') {\n            topic = [topic];\n        }\n        if (typeof opts === 'function') {\n            callback = opts;\n        }\n        callback = callback || this.noop;\n        const invalidTopic = validations.validateTopics(topic);\n        if (invalidTopic !== null) {\n            setImmediate(callback, new Error(`Invalid topic ${invalidTopic}`));\n            return this;\n        }\n        if (this._checkDisconnecting(callback)) {\n            return this;\n        }\n        const unsubscribeProc = () => {\n            const messageId = this._nextId();\n            if (messageId === null) {\n                this.log('No messageId left');\n                return false;\n            }\n            const packet = {\n                cmd: 'unsubscribe',\n                messageId,\n                unsubscriptions: [],\n            };\n            if (typeof topic === 'string') {\n                packet.unsubscriptions = [topic];\n            }\n            else if (Array.isArray(topic)) {\n                packet.unsubscriptions = topic;\n            }\n            if (this.options.resubscribe) {\n                packet.unsubscriptions.forEach((topic2) => {\n                    delete this._resubscribeTopics[topic2];\n                });\n            }\n            if (typeof opts === 'object' && opts.properties) {\n                packet.properties = opts.properties;\n            }\n            this.outgoing[packet.messageId] = {\n                volatile: true,\n                cb: callback,\n            };\n            this.log('unsubscribe: call _sendPacket');\n            this._sendPacket(packet);\n            return true;\n        };\n        if (this._storeProcessing ||\n            this._storeProcessingQueue.length > 0 ||\n            !unsubscribeProc()) {\n            this._storeProcessingQueue.push({\n                invoke: unsubscribeProc,\n                callback,\n            });\n        }\n        return this;\n    }\n    unsubscribeAsync(topic, opts) {\n        return new Promise((resolve, reject) => {\n            this.unsubscribe(topic, opts, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    end(force, opts, cb) {\n        this.log('end :: (%s)', this.options.clientId);\n        if (force == null || typeof force !== 'boolean') {\n            cb = cb || opts;\n            opts = force;\n            force = false;\n        }\n        if (typeof opts !== 'object') {\n            cb = cb || opts;\n            opts = null;\n        }\n        this.log('end :: cb? %s', !!cb);\n        if (!cb || typeof cb !== 'function') {\n            cb = this.noop;\n        }\n        const closeStores = () => {\n            this.log('end :: closeStores: closing incoming and outgoing stores');\n            this.disconnected = true;\n            this.incomingStore.close((e1) => {\n                this.outgoingStore.close((e2) => {\n                    this.log('end :: closeStores: emitting end');\n                    this.emit('end');\n                    if (cb) {\n                        const err = e1 || e2;\n                        this.log('end :: closeStores: invoking callback with args');\n                        cb(err);\n                    }\n                });\n            });\n            if (this._deferredReconnect) {\n                this._deferredReconnect();\n            }\n        };\n        const finish = () => {\n            this.log('end :: (%s) :: finish :: calling _cleanUp with force %s', this.options.clientId, force);\n            this._cleanUp(force, () => {\n                this.log('end :: finish :: calling process.nextTick on closeStores');\n                nextTick(closeStores);\n            }, opts);\n        };\n        if (this.disconnecting) {\n            cb();\n            return this;\n        }\n        this._clearReconnect();\n        this.disconnecting = true;\n        if (!force && Object.keys(this.outgoing).length > 0) {\n            this.log('end :: (%s) :: calling finish in 10ms once outgoing is empty', this.options.clientId);\n            this.once('outgoingEmpty', setTimeout.bind(null, finish, 10));\n        }\n        else {\n            this.log('end :: (%s) :: immediately calling finish', this.options.clientId);\n            finish();\n        }\n        return this;\n    }\n    endAsync(force, opts) {\n        return new Promise((resolve, reject) => {\n            this.end(force, opts, (err) => {\n                if (err) {\n                    reject(err);\n                }\n                else {\n                    resolve();\n                }\n            });\n        });\n    }\n    removeOutgoingMessage(messageId) {\n        if (this.outgoing[messageId]) {\n            const { cb } = this.outgoing[messageId];\n            this._removeOutgoingAndStoreMessage(messageId, () => {\n                cb(new Error('Message removed'));\n            });\n        }\n        return this;\n    }\n    reconnect(opts) {\n        this.log('client reconnect');\n        const f = () => {\n            if (opts) {\n                this.options.incomingStore = opts.incomingStore;\n                this.options.outgoingStore = opts.outgoingStore;\n            }\n            else {\n                this.options.incomingStore = null;\n                this.options.outgoingStore = null;\n            }\n            this.incomingStore = this.options.incomingStore || new store_1.default();\n            this.outgoingStore = this.options.outgoingStore || new store_1.default();\n            this.disconnecting = false;\n            this.disconnected = false;\n            this._deferredReconnect = null;\n            this._reconnect();\n        };\n        if (this.disconnecting && !this.disconnected) {\n            this._deferredReconnect = f;\n        }\n        else {\n            f();\n        }\n        return this;\n    }\n    _flushVolatile() {\n        if (this.outgoing) {\n            this.log('_flushVolatile :: deleting volatile messages from the queue and setting their callbacks as error function');\n            Object.keys(this.outgoing).forEach((messageId) => {\n                if (this.outgoing[messageId].volatile &&\n                    typeof this.outgoing[messageId].cb === 'function') {\n                    this.outgoing[messageId].cb(new Error('Connection closed'));\n                    delete this.outgoing[messageId];\n                }\n            });\n        }\n    }\n    _flush() {\n        if (this.outgoing) {\n            this.log('_flush: queue exists? %b', !!this.outgoing);\n            Object.keys(this.outgoing).forEach((messageId) => {\n                if (typeof this.outgoing[messageId].cb === 'function') {\n                    this.outgoing[messageId].cb(new Error('Connection closed'));\n                    delete this.outgoing[messageId];\n                }\n            });\n        }\n    }\n    _removeTopicAliasAndRecoverTopicName(packet) {\n        let alias;\n        if (packet.properties) {\n            alias = packet.properties.topicAlias;\n        }\n        let topic = packet.topic.toString();\n        this.log('_removeTopicAliasAndRecoverTopicName :: alias %d, topic %o', alias, topic);\n        if (topic.length === 0) {\n            if (typeof alias === 'undefined') {\n                return new Error('Unregistered Topic Alias');\n            }\n            topic = this.topicAliasSend.getTopicByAlias(alias);\n            if (typeof topic === 'undefined') {\n                return new Error('Unregistered Topic Alias');\n            }\n            packet.topic = topic;\n        }\n        if (alias) {\n            delete packet.properties.topicAlias;\n        }\n    }\n    _checkDisconnecting(callback) {\n        if (this.disconnecting) {\n            if (callback && callback !== this.noop) {\n                callback(new Error('client disconnecting'));\n            }\n            else {\n                this.emit('error', new Error('client disconnecting'));\n            }\n        }\n        return this.disconnecting;\n    }\n    _reconnect() {\n        this.log('_reconnect: emitting reconnect to client');\n        this.emit('reconnect');\n        if (this.connected) {\n            this.end(() => {\n                this.connect();\n            });\n            this.log('client already connected. disconnecting first.');\n        }\n        else {\n            this.log('_reconnect: calling connect');\n            this.connect();\n        }\n    }\n    _setupReconnect() {\n        if (!this.disconnecting &&\n            !this.reconnectTimer &&\n            this.options.reconnectPeriod > 0) {\n            if (!this.reconnecting) {\n                this.log('_setupReconnect :: emit `offline` state');\n                this.emit('offline');\n                this.log('_setupReconnect :: set `reconnecting` to `true`');\n                this.reconnecting = true;\n            }\n            this.log('_setupReconnect :: setting reconnectTimer for %d ms', this.options.reconnectPeriod);\n            this.reconnectTimer = setInterval(() => {\n                this.log('reconnectTimer :: reconnect triggered!');\n                this._reconnect();\n            }, this.options.reconnectPeriod);\n        }\n        else {\n            this.log('_setupReconnect :: doing nothing...');\n        }\n    }\n    _clearReconnect() {\n        this.log('_clearReconnect : clearing reconnect timer');\n        if (this.reconnectTimer) {\n            clearInterval(this.reconnectTimer);\n            this.reconnectTimer = null;\n        }\n    }\n    _cleanUp(forced, done, opts = {}) {\n        if (done) {\n            this.log('_cleanUp :: done callback provided for on stream close');\n            this.stream.on('close', done);\n        }\n        this.log('_cleanUp :: forced? %s', forced);\n        if (forced) {\n            if (this.options.reconnectPeriod === 0 && this.options.clean) {\n                this._flush();\n            }\n            this.log('_cleanUp :: (%s) :: destroying stream', this.options.clientId);\n            this.stream.destroy();\n        }\n        else {\n            const packet = Object.assign({ cmd: 'disconnect' }, opts);\n            this.log('_cleanUp :: (%s) :: call _sendPacket with disconnect packet', this.options.clientId);\n            this._sendPacket(packet, () => {\n                this.log('_cleanUp :: (%s) :: destroying stream', this.options.clientId);\n                setImmediate(() => {\n                    this.stream.end(() => {\n                        this.log('_cleanUp :: (%s) :: stream destroyed', this.options.clientId);\n                    });\n                });\n            });\n        }\n        if (!this.disconnecting) {\n            this.log('_cleanUp :: client not disconnecting. Clearing and resetting reconnect.');\n            this._clearReconnect();\n            this._setupReconnect();\n        }\n        if (this.pingTimer !== null) {\n            this.log('_cleanUp :: clearing pingTimer');\n            this.pingTimer.clear();\n            this.pingTimer = null;\n        }\n        if (done && !this.connected) {\n            this.log('_cleanUp :: (%s) :: removing stream `done` callback `close` listener', this.options.clientId);\n            this.stream.removeListener('close', done);\n            done();\n        }\n    }\n    _storeAndSend(packet, cb, cbStorePut) {\n        this.log('storeAndSend :: store packet with cmd %s to outgoingStore', packet.cmd);\n        let storePacket = packet;\n        let err;\n        if (storePacket.cmd === 'publish') {\n            storePacket = (0, default_1.default)(packet);\n            err = this._removeTopicAliasAndRecoverTopicName(storePacket);\n            if (err) {\n                return cb && cb(err);\n            }\n        }\n        this.outgoingStore.put(storePacket, (err2) => {\n            if (err2) {\n                return cb && cb(err2);\n            }\n            cbStorePut();\n            this._writePacket(packet, cb);\n        });\n    }\n    _applyTopicAlias(packet) {\n        if (this.options.protocolVersion === 5) {\n            if (packet.cmd === 'publish') {\n                let alias;\n                if (packet.properties) {\n                    alias = packet.properties.topicAlias;\n                }\n                const topic = packet.topic.toString();\n                if (this.topicAliasSend) {\n                    if (alias) {\n                        if (topic.length !== 0) {\n                            this.log('applyTopicAlias :: register topic: %s - alias: %d', topic, alias);\n                            if (!this.topicAliasSend.put(topic, alias)) {\n                                this.log('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias);\n                                return new Error('Sending Topic Alias out of range');\n                            }\n                        }\n                    }\n                    else if (topic.length !== 0) {\n                        if (this.options.autoAssignTopicAlias) {\n                            alias = this.topicAliasSend.getAliasByTopic(topic);\n                            if (alias) {\n                                packet.topic = '';\n                                packet.properties = Object.assign(Object.assign({}, packet.properties), { topicAlias: alias });\n                                this.log('applyTopicAlias :: auto assign(use) topic: %s - alias: %d', topic, alias);\n                            }\n                            else {\n                                alias = this.topicAliasSend.getLruAlias();\n                                this.topicAliasSend.put(topic, alias);\n                                packet.properties = Object.assign(Object.assign({}, packet.properties), { topicAlias: alias });\n                                this.log('applyTopicAlias :: auto assign topic: %s - alias: %d', topic, alias);\n                            }\n                        }\n                        else if (this.options.autoUseTopicAlias) {\n                            alias = this.topicAliasSend.getAliasByTopic(topic);\n                            if (alias) {\n                                packet.topic = '';\n                                packet.properties = Object.assign(Object.assign({}, packet.properties), { topicAlias: alias });\n                                this.log('applyTopicAlias :: auto use topic: %s - alias: %d', topic, alias);\n                            }\n                        }\n                    }\n                }\n                else if (alias) {\n                    this.log('applyTopicAlias :: error out of range. topic: %s - alias: %d', topic, alias);\n                    return new Error('Sending Topic Alias out of range');\n                }\n            }\n        }\n    }\n    _noop(err) {\n        this.log('noop ::', err);\n    }\n    _writePacket(packet, cb) {\n        this.log('_writePacket :: packet: %O', packet);\n        this.log('_writePacket :: emitting `packetsend`');\n        this.emit('packetsend', packet);\n        this._shiftPingInterval();\n        this.log('_writePacket :: writing to stream');\n        const result = mqtt_packet_1.default.writeToStream(packet, this.stream, this.options);\n        this.log('_writePacket :: writeToStream result %s', result);\n        if (!result && cb && cb !== this.noop) {\n            this.log('_writePacket :: handle events on `drain` once through callback.');\n            this.stream.once('drain', cb);\n        }\n        else if (cb) {\n            this.log('_writePacket :: invoking cb');\n            cb();\n        }\n    }\n    _sendPacket(packet, cb, cbStorePut, noStore) {\n        this.log('_sendPacket :: (%s) ::  start', this.options.clientId);\n        cbStorePut = cbStorePut || this.noop;\n        cb = cb || this.noop;\n        const err = this._applyTopicAlias(packet);\n        if (err) {\n            cb(err);\n            return;\n        }\n        if (!this.connected) {\n            if (packet.cmd === 'auth') {\n                this._writePacket(packet, cb);\n                return;\n            }\n            this.log('_sendPacket :: client not connected. Storing packet offline.');\n            this._storePacket(packet, cb, cbStorePut);\n            return;\n        }\n        if (noStore) {\n            this._writePacket(packet, cb);\n            return;\n        }\n        switch (packet.cmd) {\n            case 'publish':\n                break;\n            case 'pubrel':\n                this._storeAndSend(packet, cb, cbStorePut);\n                return;\n            default:\n                this._writePacket(packet, cb);\n                return;\n        }\n        switch (packet.qos) {\n            case 2:\n            case 1:\n                this._storeAndSend(packet, cb, cbStorePut);\n                break;\n            case 0:\n            default:\n                this._writePacket(packet, cb);\n                break;\n        }\n        this.log('_sendPacket :: (%s) ::  end', this.options.clientId);\n    }\n    _storePacket(packet, cb, cbStorePut) {\n        this.log('_storePacket :: packet: %o', packet);\n        this.log('_storePacket :: cb? %s', !!cb);\n        cbStorePut = cbStorePut || this.noop;\n        let storePacket = packet;\n        if (storePacket.cmd === 'publish') {\n            storePacket = (0, default_1.default)(packet);\n            const err = this._removeTopicAliasAndRecoverTopicName(storePacket);\n            if (err) {\n                return cb && cb(err);\n            }\n        }\n        const qos = storePacket.qos || 0;\n        if ((qos === 0 && this.queueQoSZero) || storePacket.cmd !== 'publish') {\n            this.queue.push({ packet: storePacket, cb });\n        }\n        else if (qos > 0) {\n            cb = this.outgoing[storePacket.messageId]\n                ? this.outgoing[storePacket.messageId].cb\n                : null;\n            this.outgoingStore.put(storePacket, (err) => {\n                if (err) {\n                    return cb && cb(err);\n                }\n                cbStorePut();\n            });\n        }\n        else if (cb) {\n            cb(new Error('No connection to broker'));\n        }\n    }\n    _setupPingTimer() {\n        this.log('_setupPingTimer :: keepalive %d (seconds)', this.options.keepalive);\n        if (!this.pingTimer && this.options.keepalive) {\n            this.pingResp = true;\n            this.pingTimer = (0, reinterval_1.default)(() => {\n                this._checkPing();\n            }, this.options.keepalive * 1000);\n        }\n    }\n    _shiftPingInterval() {\n        if (this.pingTimer &&\n            this.options.keepalive &&\n            this.options.reschedulePings) {\n            this.pingTimer.reschedule(this.options.keepalive * 1000);\n        }\n    }\n    _checkPing() {\n        this.log('_checkPing :: checking ping...');\n        if (this.pingResp) {\n            this.log('_checkPing :: ping response received. Clearing flag and sending `pingreq`');\n            this.pingResp = false;\n            this._sendPacket({ cmd: 'pingreq' });\n        }\n        else {\n            this.log('_checkPing :: calling _cleanUp with force true');\n            this._cleanUp(true);\n        }\n    }\n    _resubscribe() {\n        this.log('_resubscribe');\n        const _resubscribeTopicsKeys = Object.keys(this._resubscribeTopics);\n        if (!this._firstConnection &&\n            (this.options.clean ||\n                (this.options.protocolVersion >= 4 &&\n                    !this.connackPacket.sessionPresent)) &&\n            _resubscribeTopicsKeys.length > 0) {\n            if (this.options.resubscribe) {\n                if (this.options.protocolVersion === 5) {\n                    this.log('_resubscribe: protocolVersion 5');\n                    for (let topicI = 0; topicI < _resubscribeTopicsKeys.length; topicI++) {\n                        const resubscribeTopic = {};\n                        resubscribeTopic[_resubscribeTopicsKeys[topicI]] =\n                            this._resubscribeTopics[_resubscribeTopicsKeys[topicI]];\n                        resubscribeTopic.resubscribe = true;\n                        this.subscribe(resubscribeTopic, {\n                            properties: resubscribeTopic[_resubscribeTopicsKeys[topicI]]\n                                .properties,\n                        });\n                    }\n                }\n                else {\n                    this._resubscribeTopics.resubscribe = true;\n                    this.subscribe(this._resubscribeTopics);\n                }\n            }\n            else {\n                this._resubscribeTopics = {};\n            }\n        }\n        this._firstConnection = false;\n    }\n    _onConnect(packet) {\n        if (this.disconnected) {\n            this.emit('connect', packet);\n            return;\n        }\n        this.connackPacket = packet;\n        this.messageIdProvider.clear();\n        this._setupPingTimer();\n        this.connected = true;\n        const startStreamProcess = () => {\n            let outStore = this.outgoingStore.createStream();\n            const remove = () => {\n                outStore.destroy();\n                outStore = null;\n                this._flushStoreProcessingQueue();\n                clearStoreProcessing();\n            };\n            const clearStoreProcessing = () => {\n                this._storeProcessing = false;\n                this._packetIdsDuringStoreProcessing = {};\n            };\n            this.once('close', remove);\n            outStore.on('error', (err) => {\n                clearStoreProcessing();\n                this._flushStoreProcessingQueue();\n                this.removeListener('close', remove);\n                this.emit('error', err);\n            });\n            const storeDeliver = () => {\n                if (!outStore) {\n                    return;\n                }\n                const packet2 = outStore.read(1);\n                let cb;\n                if (!packet2) {\n                    outStore.once('readable', storeDeliver);\n                    return;\n                }\n                this._storeProcessing = true;\n                if (this._packetIdsDuringStoreProcessing[packet2.messageId]) {\n                    storeDeliver();\n                    return;\n                }\n                if (!this.disconnecting && !this.reconnectTimer) {\n                    cb = this.outgoing[packet2.messageId]\n                        ? this.outgoing[packet2.messageId].cb\n                        : null;\n                    this.outgoing[packet2.messageId] = {\n                        volatile: false,\n                        cb(err, status) {\n                            if (cb) {\n                                cb(err, status);\n                            }\n                            storeDeliver();\n                        },\n                    };\n                    this._packetIdsDuringStoreProcessing[packet2.messageId] =\n                        true;\n                    if (this.messageIdProvider.register(packet2.messageId)) {\n                        this._sendPacket(packet2, undefined, undefined, true);\n                    }\n                    else {\n                        this.log('messageId: %d has already used.', packet2.messageId);\n                    }\n                }\n                else if (outStore.destroy) {\n                    outStore.destroy();\n                }\n            };\n            outStore.on('end', () => {\n                let allProcessed = true;\n                for (const id in this._packetIdsDuringStoreProcessing) {\n                    if (!this._packetIdsDuringStoreProcessing[id]) {\n                        allProcessed = false;\n                        break;\n                    }\n                }\n                if (allProcessed) {\n                    clearStoreProcessing();\n                    this.removeListener('close', remove);\n                    this._invokeAllStoreProcessingQueue();\n                    this.emit('connect', packet);\n                }\n                else {\n                    startStreamProcess();\n                }\n            });\n            storeDeliver();\n        };\n        startStreamProcess();\n    }\n    _invokeStoreProcessingQueue() {\n        if (!this._storeProcessing && this._storeProcessingQueue.length > 0) {\n            const f = this._storeProcessingQueue[0];\n            if (f && f.invoke()) {\n                this._storeProcessingQueue.shift();\n                return true;\n            }\n        }\n        return false;\n    }\n    _invokeAllStoreProcessingQueue() {\n        while (this._invokeStoreProcessingQueue()) {\n        }\n    }\n    _flushStoreProcessingQueue() {\n        for (const f of this._storeProcessingQueue) {\n            if (f.cbStorePut)\n                f.cbStorePut(new Error('Connection closed'));\n            if (f.callback)\n                f.callback(new Error('Connection closed'));\n        }\n        this._storeProcessingQueue.splice(0);\n    }\n    _removeOutgoingAndStoreMessage(messageId, cb) {\n        delete this.outgoing[messageId];\n        this.outgoingStore.del({ messageId }, (err, packet) => {\n            cb(err, packet);\n            this.messageIdProvider.deallocate(messageId);\n            this._invokeStoreProcessingQueue();\n        });\n    }\n}\nexports[\"default\"] = MqttClient;\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/client.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/connect/ali.js":
/*!****************************************************!*\
  !*** ./node_modules/mqtt/build/lib/connect/ali.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst readable_stream_1 = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\nconst duplexify_1 = __importDefault(__webpack_require__(/*! duplexify */ \"(ssr)/./node_modules/duplexify/index.js\"));\nlet my;\nlet proxy;\nlet stream;\nlet isInitialized = false;\nfunction buildProxy() {\n    const _proxy = new readable_stream_1.Transform();\n    _proxy._write = (chunk, encoding, next) => {\n        my.sendSocketMessage({\n            data: chunk.buffer,\n            success() {\n                next();\n            },\n            fail() {\n                next(new Error());\n            },\n        });\n    };\n    _proxy._flush = (done) => {\n        my.closeSocket({\n            success() {\n                done();\n            },\n        });\n    };\n    return _proxy;\n}\nfunction setDefaultOpts(opts) {\n    if (!opts.hostname) {\n        opts.hostname = 'localhost';\n    }\n    if (!opts.path) {\n        opts.path = '/';\n    }\n    if (!opts.wsOptions) {\n        opts.wsOptions = {};\n    }\n}\nfunction buildUrl(opts, client) {\n    const protocol = opts.protocol === 'alis' ? 'wss' : 'ws';\n    let url = `${protocol}://${opts.hostname}${opts.path}`;\n    if (opts.port && opts.port !== 80 && opts.port !== 443) {\n        url = `${protocol}://${opts.hostname}:${opts.port}${opts.path}`;\n    }\n    if (typeof opts.transformWsUrl === 'function') {\n        url = opts.transformWsUrl(url, opts, client);\n    }\n    return url;\n}\nfunction bindEventHandler() {\n    if (isInitialized)\n        return;\n    isInitialized = true;\n    my.onSocketOpen(() => {\n        stream.setReadable(proxy);\n        stream.setWritable(proxy);\n        stream.emit('connect');\n    });\n    my.onSocketMessage((res) => {\n        if (typeof res.data === 'string') {\n            const buffer = buffer_1.Buffer.from(res.data, 'base64');\n            proxy.push(buffer);\n        }\n        else {\n            const reader = new FileReader();\n            reader.addEventListener('load', () => {\n                let data = reader.result;\n                if (data instanceof ArrayBuffer)\n                    data = buffer_1.Buffer.from(data);\n                else\n                    data = buffer_1.Buffer.from(data, 'utf8');\n                proxy.push(data);\n            });\n            reader.readAsArrayBuffer(res.data);\n        }\n    });\n    my.onSocketClose(() => {\n        stream.end();\n        stream.destroy();\n    });\n    my.onSocketError((res) => {\n        stream.destroy(res);\n    });\n}\nconst buildStream = (client, opts) => {\n    opts.hostname = opts.hostname || opts.host;\n    if (!opts.hostname) {\n        throw new Error('Could not determine host. Specify host manually.');\n    }\n    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3\n        ? 'mqttv3.1'\n        : 'mqtt';\n    setDefaultOpts(opts);\n    const url = buildUrl(opts, client);\n    my = opts.my;\n    my.connectSocket({\n        url,\n        protocols: websocketSubProtocol,\n    });\n    proxy = buildProxy();\n    stream = duplexify_1.default.obj();\n    bindEventHandler();\n    return stream;\n};\nexports[\"default\"] = buildStream;\n//# sourceMappingURL=ali.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvY29ubmVjdC9hbGkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQyxzQkFBUTtBQUNqQywwQkFBMEIsbUJBQU8sQ0FBQywrRUFBaUI7QUFDbkQsb0NBQW9DLG1CQUFPLENBQUMsMERBQVc7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTLEtBQUssY0FBYyxFQUFFLFVBQVU7QUFDekQ7QUFDQSxpQkFBaUIsU0FBUyxLQUFLLGNBQWMsR0FBRyxVQUFVLEVBQUUsVUFBVTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pb3RfY2hlY2svLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvY29ubmVjdC9hbGkuanM/N2RiZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IHJlYWRhYmxlX3N0cmVhbV8xID0gcmVxdWlyZShcInJlYWRhYmxlLXN0cmVhbVwiKTtcbmNvbnN0IGR1cGxleGlmeV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkdXBsZXhpZnlcIikpO1xubGV0IG15O1xubGV0IHByb3h5O1xubGV0IHN0cmVhbTtcbmxldCBpc0luaXRpYWxpemVkID0gZmFsc2U7XG5mdW5jdGlvbiBidWlsZFByb3h5KCkge1xuICAgIGNvbnN0IF9wcm94eSA9IG5ldyByZWFkYWJsZV9zdHJlYW1fMS5UcmFuc2Zvcm0oKTtcbiAgICBfcHJveHkuX3dyaXRlID0gKGNodW5rLCBlbmNvZGluZywgbmV4dCkgPT4ge1xuICAgICAgICBteS5zZW5kU29ja2V0TWVzc2FnZSh7XG4gICAgICAgICAgICBkYXRhOiBjaHVuay5idWZmZXIsXG4gICAgICAgICAgICBzdWNjZXNzKCkge1xuICAgICAgICAgICAgICAgIG5leHQoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmYWlsKCkge1xuICAgICAgICAgICAgICAgIG5leHQobmV3IEVycm9yKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBfcHJveHkuX2ZsdXNoID0gKGRvbmUpID0+IHtcbiAgICAgICAgbXkuY2xvc2VTb2NrZXQoe1xuICAgICAgICAgICAgc3VjY2VzcygpIHtcbiAgICAgICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBfcHJveHk7XG59XG5mdW5jdGlvbiBzZXREZWZhdWx0T3B0cyhvcHRzKSB7XG4gICAgaWYgKCFvcHRzLmhvc3RuYW1lKSB7XG4gICAgICAgIG9wdHMuaG9zdG5hbWUgPSAnbG9jYWxob3N0JztcbiAgICB9XG4gICAgaWYgKCFvcHRzLnBhdGgpIHtcbiAgICAgICAgb3B0cy5wYXRoID0gJy8nO1xuICAgIH1cbiAgICBpZiAoIW9wdHMud3NPcHRpb25zKSB7XG4gICAgICAgIG9wdHMud3NPcHRpb25zID0ge307XG4gICAgfVxufVxuZnVuY3Rpb24gYnVpbGRVcmwob3B0cywgY2xpZW50KSB7XG4gICAgY29uc3QgcHJvdG9jb2wgPSBvcHRzLnByb3RvY29sID09PSAnYWxpcycgPyAnd3NzJyA6ICd3cyc7XG4gICAgbGV0IHVybCA9IGAke3Byb3RvY29sfTovLyR7b3B0cy5ob3N0bmFtZX0ke29wdHMucGF0aH1gO1xuICAgIGlmIChvcHRzLnBvcnQgJiYgb3B0cy5wb3J0ICE9PSA4MCAmJiBvcHRzLnBvcnQgIT09IDQ0Mykge1xuICAgICAgICB1cmwgPSBgJHtwcm90b2NvbH06Ly8ke29wdHMuaG9zdG5hbWV9OiR7b3B0cy5wb3J0fSR7b3B0cy5wYXRofWA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0cy50cmFuc2Zvcm1Xc1VybCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB1cmwgPSBvcHRzLnRyYW5zZm9ybVdzVXJsKHVybCwgb3B0cywgY2xpZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn1cbmZ1bmN0aW9uIGJpbmRFdmVudEhhbmRsZXIoKSB7XG4gICAgaWYgKGlzSW5pdGlhbGl6ZWQpXG4gICAgICAgIHJldHVybjtcbiAgICBpc0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBteS5vblNvY2tldE9wZW4oKCkgPT4ge1xuICAgICAgICBzdHJlYW0uc2V0UmVhZGFibGUocHJveHkpO1xuICAgICAgICBzdHJlYW0uc2V0V3JpdGFibGUocHJveHkpO1xuICAgICAgICBzdHJlYW0uZW1pdCgnY29ubmVjdCcpO1xuICAgIH0pO1xuICAgIG15Lm9uU29ja2V0TWVzc2FnZSgocmVzKSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVzLmRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShyZXMuZGF0YSwgJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgcHJveHkucHVzaChidWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgIHJlYWRlci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBkYXRhID0gcmVhZGVyLnJlc3VsdDtcbiAgICAgICAgICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oZGF0YSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBkYXRhID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oZGF0YSwgJ3V0ZjgnKTtcbiAgICAgICAgICAgICAgICBwcm94eS5wdXNoKGRhdGEpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIocmVzLmRhdGEpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbXkub25Tb2NrZXRDbG9zZSgoKSA9PiB7XG4gICAgICAgIHN0cmVhbS5lbmQoKTtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICB9KTtcbiAgICBteS5vblNvY2tldEVycm9yKChyZXMpID0+IHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3kocmVzKTtcbiAgICB9KTtcbn1cbmNvbnN0IGJ1aWxkU3RyZWFtID0gKGNsaWVudCwgb3B0cykgPT4ge1xuICAgIG9wdHMuaG9zdG5hbWUgPSBvcHRzLmhvc3RuYW1lIHx8IG9wdHMuaG9zdDtcbiAgICBpZiAoIW9wdHMuaG9zdG5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZGV0ZXJtaW5lIGhvc3QuIFNwZWNpZnkgaG9zdCBtYW51YWxseS4nKTtcbiAgICB9XG4gICAgY29uc3Qgd2Vic29ja2V0U3ViUHJvdG9jb2wgPSBvcHRzLnByb3RvY29sSWQgPT09ICdNUUlzZHAnICYmIG9wdHMucHJvdG9jb2xWZXJzaW9uID09PSAzXG4gICAgICAgID8gJ21xdHR2My4xJ1xuICAgICAgICA6ICdtcXR0JztcbiAgICBzZXREZWZhdWx0T3B0cyhvcHRzKTtcbiAgICBjb25zdCB1cmwgPSBidWlsZFVybChvcHRzLCBjbGllbnQpO1xuICAgIG15ID0gb3B0cy5teTtcbiAgICBteS5jb25uZWN0U29ja2V0KHtcbiAgICAgICAgdXJsLFxuICAgICAgICBwcm90b2NvbHM6IHdlYnNvY2tldFN1YlByb3RvY29sLFxuICAgIH0pO1xuICAgIHByb3h5ID0gYnVpbGRQcm94eSgpO1xuICAgIHN0cmVhbSA9IGR1cGxleGlmeV8xLmRlZmF1bHQub2JqKCk7XG4gICAgYmluZEV2ZW50SGFuZGxlcigpO1xuICAgIHJldHVybiBzdHJlYW07XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gYnVpbGRTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/connect/ali.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/connect/index.js":
/*!******************************************************!*\
  !*** ./node_modules/mqtt/build/lib/connect/index.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.connectAsync = void 0;\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst url_1 = __importDefault(__webpack_require__(/*! url */ \"url\"));\nconst client_1 = __importDefault(__webpack_require__(/*! ../client */ \"(ssr)/./node_modules/mqtt/build/lib/client.js\"));\nconst is_browser_1 = __importDefault(__webpack_require__(/*! ../is-browser */ \"(ssr)/./node_modules/mqtt/build/lib/is-browser.js\"));\nconst debug = (0, debug_1.default)('mqttjs');\nconst protocols = {};\nif (!is_browser_1.default) {\n    protocols.mqtt = (__webpack_require__(/*! ./tcp */ \"(ssr)/./node_modules/mqtt/build/lib/connect/tcp.js\")[\"default\"]);\n    protocols.tcp = (__webpack_require__(/*! ./tcp */ \"(ssr)/./node_modules/mqtt/build/lib/connect/tcp.js\")[\"default\"]);\n    protocols.ssl = (__webpack_require__(/*! ./tls */ \"(ssr)/./node_modules/mqtt/build/lib/connect/tls.js\")[\"default\"]);\n    protocols.tls = protocols.ssl;\n    protocols.mqtts = (__webpack_require__(/*! ./tls */ \"(ssr)/./node_modules/mqtt/build/lib/connect/tls.js\")[\"default\"]);\n}\nelse {\n    protocols.wx = (__webpack_require__(/*! ./wx */ \"(ssr)/./node_modules/mqtt/build/lib/connect/wx.js\")[\"default\"]);\n    protocols.wxs = (__webpack_require__(/*! ./wx */ \"(ssr)/./node_modules/mqtt/build/lib/connect/wx.js\")[\"default\"]);\n    protocols.ali = (__webpack_require__(/*! ./ali */ \"(ssr)/./node_modules/mqtt/build/lib/connect/ali.js\")[\"default\"]);\n    protocols.alis = (__webpack_require__(/*! ./ali */ \"(ssr)/./node_modules/mqtt/build/lib/connect/ali.js\")[\"default\"]);\n}\nprotocols.ws = (__webpack_require__(/*! ./ws */ \"(ssr)/./node_modules/mqtt/build/lib/connect/ws.js\")[\"default\"]);\nprotocols.wss = (__webpack_require__(/*! ./ws */ \"(ssr)/./node_modules/mqtt/build/lib/connect/ws.js\")[\"default\"]);\nfunction parseAuthOptions(opts) {\n    let matches;\n    if (opts.auth) {\n        matches = opts.auth.match(/^(.+):(.+)$/);\n        if (matches) {\n            opts.username = matches[1];\n            opts.password = matches[2];\n        }\n        else {\n            opts.username = opts.auth;\n        }\n    }\n}\nfunction connect(brokerUrl, opts) {\n    debug('connecting to an MQTT broker...');\n    if (typeof brokerUrl === 'object' && !opts) {\n        opts = brokerUrl;\n        brokerUrl = '';\n    }\n    opts = opts || {};\n    if (brokerUrl && typeof brokerUrl === 'string') {\n        const parsed = url_1.default.parse(brokerUrl, true);\n        if (parsed.port != null) {\n            parsed.port = Number(parsed.port);\n        }\n        opts = Object.assign(Object.assign({}, parsed), opts);\n        if (opts.protocol === null) {\n            throw new Error('Missing protocol');\n        }\n        opts.protocol = opts.protocol.replace(/:$/, '');\n    }\n    parseAuthOptions(opts);\n    if (opts.query && typeof opts.query.clientId === 'string') {\n        opts.clientId = opts.query.clientId;\n    }\n    if (opts.cert && opts.key) {\n        if (opts.protocol) {\n            if (['mqtts', 'wss', 'wxs', 'alis'].indexOf(opts.protocol) === -1) {\n                switch (opts.protocol) {\n                    case 'mqtt':\n                        opts.protocol = 'mqtts';\n                        break;\n                    case 'ws':\n                        opts.protocol = 'wss';\n                        break;\n                    case 'wx':\n                        opts.protocol = 'wxs';\n                        break;\n                    case 'ali':\n                        opts.protocol = 'alis';\n                        break;\n                    default:\n                        throw new Error(`Unknown protocol for secure connection: \"${opts.protocol}\"!`);\n                }\n            }\n        }\n        else {\n            throw new Error('Missing secure protocol key');\n        }\n    }\n    if (!protocols[opts.protocol]) {\n        const isSecure = ['mqtts', 'wss'].indexOf(opts.protocol) !== -1;\n        opts.protocol = [\n            'mqtt',\n            'mqtts',\n            'ws',\n            'wss',\n            'wx',\n            'wxs',\n            'ali',\n            'alis',\n        ].filter((key, index) => {\n            if (isSecure && index % 2 === 0) {\n                return false;\n            }\n            return typeof protocols[key] === 'function';\n        })[0];\n    }\n    if (opts.clean === false && !opts.clientId) {\n        throw new Error('Missing clientId for unclean clients');\n    }\n    if (opts.protocol) {\n        opts.defaultProtocol = opts.protocol;\n    }\n    function wrapper(client) {\n        if (opts.servers) {\n            if (!client._reconnectCount ||\n                client._reconnectCount === opts.servers.length) {\n                client._reconnectCount = 0;\n            }\n            opts.host = opts.servers[client._reconnectCount].host;\n            opts.port = opts.servers[client._reconnectCount].port;\n            opts.protocol = !opts.servers[client._reconnectCount].protocol\n                ? opts.defaultProtocol\n                : opts.servers[client._reconnectCount].protocol;\n            opts.hostname = opts.host;\n            client._reconnectCount++;\n        }\n        debug('calling streambuilder for', opts.protocol);\n        return protocols[opts.protocol](client, opts);\n    }\n    const client = new client_1.default(wrapper, opts);\n    client.on('error', () => {\n    });\n    return client;\n}\nfunction connectAsync(brokerUrl, opts, allowRetries = true) {\n    return new Promise((resolve, reject) => {\n        const client = connect(brokerUrl, opts);\n        const promiseResolutionListeners = {\n            connect: (connack) => {\n                removePromiseResolutionListeners();\n                resolve(client);\n            },\n            end: () => {\n                removePromiseResolutionListeners();\n                resolve(client);\n            },\n            error: (err) => {\n                removePromiseResolutionListeners();\n                client.end();\n                reject(err);\n            },\n        };\n        if (allowRetries === false) {\n            promiseResolutionListeners.close = () => {\n                promiseResolutionListeners.error(new Error(\"Couldn't connect to server\"));\n            };\n        }\n        function removePromiseResolutionListeners() {\n            Object.keys(promiseResolutionListeners).forEach((eventName) => {\n                client.off(eventName, promiseResolutionListeners[eventName]);\n            });\n        }\n        Object.keys(promiseResolutionListeners).forEach((eventName) => {\n            client.on(eventName, promiseResolutionListeners[eventName]);\n        });\n    });\n}\nexports.connectAsync = connectAsync;\nexports[\"default\"] = connect;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/connect/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/connect/tcp.js":
/*!****************************************************!*\
  !*** ./node_modules/mqtt/build/lib/connect/tcp.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst net_1 = __importDefault(__webpack_require__(/*! net */ \"net\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('mqttjs:tcp');\nconst buildStream = (client, opts) => {\n    opts.port = opts.port || 1883;\n    opts.hostname = opts.hostname || opts.host || 'localhost';\n    const { port } = opts;\n    const host = opts.hostname;\n    debug('port %d and host %s', port, host);\n    return net_1.default.createConnection(port, host);\n};\nexports[\"default\"] = buildStream;\n//# sourceMappingURL=tcp.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvY29ubmVjdC90Y3AuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQyxnQ0FBZ0MsbUJBQU8sQ0FBQyxzREFBTztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksT0FBTztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pb3RfY2hlY2svLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvY29ubmVjdC90Y3AuanM/ZjJjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG5ldF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJuZXRcIikpO1xuY29uc3QgZGVidWdfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZGVidWdcIikpO1xuY29uc3QgZGVidWcgPSAoMCwgZGVidWdfMS5kZWZhdWx0KSgnbXF0dGpzOnRjcCcpO1xuY29uc3QgYnVpbGRTdHJlYW0gPSAoY2xpZW50LCBvcHRzKSA9PiB7XG4gICAgb3B0cy5wb3J0ID0gb3B0cy5wb3J0IHx8IDE4ODM7XG4gICAgb3B0cy5ob3N0bmFtZSA9IG9wdHMuaG9zdG5hbWUgfHwgb3B0cy5ob3N0IHx8ICdsb2NhbGhvc3QnO1xuICAgIGNvbnN0IHsgcG9ydCB9ID0gb3B0cztcbiAgICBjb25zdCBob3N0ID0gb3B0cy5ob3N0bmFtZTtcbiAgICBkZWJ1ZygncG9ydCAlZCBhbmQgaG9zdCAlcycsIHBvcnQsIGhvc3QpO1xuICAgIHJldHVybiBuZXRfMS5kZWZhdWx0LmNyZWF0ZUNvbm5lY3Rpb24ocG9ydCwgaG9zdCk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gYnVpbGRTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD10Y3AuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/connect/tcp.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/connect/tls.js":
/*!****************************************************!*\
  !*** ./node_modules/mqtt/build/lib/connect/tls.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tls_1 = __importDefault(__webpack_require__(/*! tls */ \"tls\"));\nconst net_1 = __importDefault(__webpack_require__(/*! net */ \"net\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst debug = (0, debug_1.default)('mqttjs:tls');\nconst buildStream = (client, opts) => {\n    opts.port = opts.port || 8883;\n    opts.host = opts.hostname || opts.host || 'localhost';\n    if (net_1.default.isIP(opts.host) === 0) {\n        opts.servername = opts.host;\n    }\n    opts.rejectUnauthorized = opts.rejectUnauthorized !== false;\n    delete opts.path;\n    debug('port %d host %s rejectUnauthorized %b', opts.port, opts.host, opts.rejectUnauthorized);\n    const connection = tls_1.default.connect(opts);\n    connection.on('secureConnect', () => {\n        if (opts.rejectUnauthorized && !connection.authorized) {\n            connection.emit('error', new Error('TLS not authorized'));\n        }\n        else {\n            connection.removeListener('error', handleTLSerrors);\n        }\n    });\n    function handleTLSerrors(err) {\n        if (opts.rejectUnauthorized) {\n            client.emit('error', err);\n        }\n        connection.end();\n    }\n    connection.on('error', handleTLSerrors);\n    return connection;\n};\nexports[\"default\"] = buildStream;\n//# sourceMappingURL=tls.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvY29ubmVjdC90bHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEIsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQyw4QkFBOEIsbUJBQU8sQ0FBQyxnQkFBSztBQUMzQyxnQ0FBZ0MsbUJBQU8sQ0FBQyxzREFBTztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9jb25uZWN0L3Rscy5qcz85YzVkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdGxzXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcInRsc1wiKSk7XG5jb25zdCBuZXRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibmV0XCIpKTtcbmNvbnN0IGRlYnVnXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlYnVnXCIpKTtcbmNvbnN0IGRlYnVnID0gKDAsIGRlYnVnXzEuZGVmYXVsdCkoJ21xdHRqczp0bHMnKTtcbmNvbnN0IGJ1aWxkU3RyZWFtID0gKGNsaWVudCwgb3B0cykgPT4ge1xuICAgIG9wdHMucG9ydCA9IG9wdHMucG9ydCB8fCA4ODgzO1xuICAgIG9wdHMuaG9zdCA9IG9wdHMuaG9zdG5hbWUgfHwgb3B0cy5ob3N0IHx8ICdsb2NhbGhvc3QnO1xuICAgIGlmIChuZXRfMS5kZWZhdWx0LmlzSVAob3B0cy5ob3N0KSA9PT0gMCkge1xuICAgICAgICBvcHRzLnNlcnZlcm5hbWUgPSBvcHRzLmhvc3Q7XG4gICAgfVxuICAgIG9wdHMucmVqZWN0VW5hdXRob3JpemVkID0gb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQgIT09IGZhbHNlO1xuICAgIGRlbGV0ZSBvcHRzLnBhdGg7XG4gICAgZGVidWcoJ3BvcnQgJWQgaG9zdCAlcyByZWplY3RVbmF1dGhvcml6ZWQgJWInLCBvcHRzLnBvcnQsIG9wdHMuaG9zdCwgb3B0cy5yZWplY3RVbmF1dGhvcml6ZWQpO1xuICAgIGNvbnN0IGNvbm5lY3Rpb24gPSB0bHNfMS5kZWZhdWx0LmNvbm5lY3Qob3B0cyk7XG4gICAgY29ubmVjdGlvbi5vbignc2VjdXJlQ29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgaWYgKG9wdHMucmVqZWN0VW5hdXRob3JpemVkICYmICFjb25uZWN0aW9uLmF1dGhvcml6ZWQpIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24uZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1RMUyBub3QgYXV0aG9yaXplZCcpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbm5lY3Rpb24ucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgaGFuZGxlVExTZXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGhhbmRsZVRMU2Vycm9ycyhlcnIpIHtcbiAgICAgICAgaWYgKG9wdHMucmVqZWN0VW5hdXRob3JpemVkKSB7XG4gICAgICAgICAgICBjbGllbnQuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3Rpb24uZW5kKCk7XG4gICAgfVxuICAgIGNvbm5lY3Rpb24ub24oJ2Vycm9yJywgaGFuZGxlVExTZXJyb3JzKTtcbiAgICByZXR1cm4gY29ubmVjdGlvbjtcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBidWlsZFN0cmVhbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/connect/tls.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/connect/ws.js":
/*!***************************************************!*\
  !*** ./node_modules/mqtt/build/lib/connect/ws.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst ws_1 = __importDefault(__webpack_require__(/*! ws */ \"(ssr)/./node_modules/ws/index.js\"));\nconst debug_1 = __importDefault(__webpack_require__(/*! debug */ \"(ssr)/./node_modules/debug/src/index.js\"));\nconst duplexify_1 = __importDefault(__webpack_require__(/*! duplexify */ \"(ssr)/./node_modules/duplexify/index.js\"));\nconst readable_stream_1 = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\nconst is_browser_1 = __importDefault(__webpack_require__(/*! ../is-browser */ \"(ssr)/./node_modules/mqtt/build/lib/is-browser.js\"));\nconst debug = (0, debug_1.default)('mqttjs:ws');\nconst WSS_OPTIONS = [\n    'rejectUnauthorized',\n    'ca',\n    'cert',\n    'key',\n    'pfx',\n    'passphrase',\n];\nfunction buildUrl(opts, client) {\n    let url = `${opts.protocol}://${opts.hostname}:${opts.port}${opts.path}`;\n    if (typeof opts.transformWsUrl === 'function') {\n        url = opts.transformWsUrl(url, opts, client);\n    }\n    return url;\n}\nfunction setDefaultOpts(opts) {\n    const options = opts;\n    if (!opts.hostname) {\n        options.hostname = 'localhost';\n    }\n    if (!opts.port) {\n        if (opts.protocol === 'wss') {\n            options.port = 443;\n        }\n        else {\n            options.port = 80;\n        }\n    }\n    if (!opts.path) {\n        options.path = '/';\n    }\n    if (!opts.wsOptions) {\n        options.wsOptions = {};\n    }\n    if (!is_browser_1.default && opts.protocol === 'wss') {\n        WSS_OPTIONS.forEach((prop) => {\n            if (Object.prototype.hasOwnProperty.call(opts, prop) &&\n                !Object.prototype.hasOwnProperty.call(opts.wsOptions, prop)) {\n                options.wsOptions[prop] = opts[prop];\n            }\n        });\n    }\n    return options;\n}\nfunction setDefaultBrowserOpts(opts) {\n    const options = setDefaultOpts(opts);\n    if (!options.hostname) {\n        options.hostname = options.host;\n    }\n    if (!options.hostname) {\n        if (typeof document === 'undefined') {\n            throw new Error('Could not determine host. Specify host manually.');\n        }\n        const parsed = new URL(document.URL);\n        options.hostname = parsed.hostname;\n        if (!options.port) {\n            options.port = Number(parsed.port);\n        }\n    }\n    if (options.objectMode === undefined) {\n        options.objectMode = !(options.binary === true || options.binary === undefined);\n    }\n    return options;\n}\nfunction createWebSocket(client, url, opts) {\n    debug('createWebSocket');\n    debug(`protocol: ${opts.protocolId} ${opts.protocolVersion}`);\n    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3\n        ? 'mqttv3.1'\n        : 'mqtt';\n    debug(`creating new Websocket for url: ${url} and protocol: ${websocketSubProtocol}`);\n    const socket = new ws_1.default(url, [websocketSubProtocol], opts.wsOptions);\n    return socket;\n}\nfunction createBrowserWebSocket(client, opts) {\n    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3\n        ? 'mqttv3.1'\n        : 'mqtt';\n    const url = buildUrl(opts, client);\n    const socket = new WebSocket(url, [websocketSubProtocol]);\n    socket.binaryType = 'arraybuffer';\n    return socket;\n}\nconst streamBuilder = (client, opts) => {\n    debug('streamBuilder');\n    const options = setDefaultOpts(opts);\n    const url = buildUrl(options, client);\n    const socket = createWebSocket(client, url, options);\n    const webSocketStream = ws_1.default.createWebSocketStream(socket, options.wsOptions);\n    webSocketStream['url'] = url;\n    socket.on('close', () => {\n        webSocketStream.destroy();\n    });\n    return webSocketStream;\n};\nconst browserStreamBuilder = (client, opts) => {\n    debug('browserStreamBuilder');\n    let stream;\n    const options = setDefaultBrowserOpts(opts);\n    const bufferSize = options.browserBufferSize || 1024 * 512;\n    const bufferTimeout = opts.browserBufferTimeout || 1000;\n    const coerceToBuffer = !opts.objectMode;\n    const socket = createBrowserWebSocket(client, opts);\n    const proxy = buildProxy(opts, socketWriteBrowser, socketEndBrowser);\n    if (!opts.objectMode) {\n        proxy._writev = writev;\n    }\n    proxy.on('close', () => {\n        socket.close();\n    });\n    const eventListenerSupport = typeof socket.addEventListener !== 'undefined';\n    if (socket.readyState === socket.OPEN) {\n        stream = proxy;\n    }\n    else {\n        stream = (0, duplexify_1.default)(undefined, undefined, opts);\n        if (!opts.objectMode) {\n            stream._writev = writev;\n        }\n        if (eventListenerSupport) {\n            socket.addEventListener('open', onOpen);\n        }\n        else {\n            socket.onopen = onOpen;\n        }\n    }\n    stream.socket = socket;\n    if (eventListenerSupport) {\n        socket.addEventListener('close', onClose);\n        socket.addEventListener('error', onError);\n        socket.addEventListener('message', onMessage);\n    }\n    else {\n        socket.onclose = onClose;\n        socket.onerror = onError;\n        socket.onmessage = onMessage;\n    }\n    function buildProxy(pOptions, socketWrite, socketEnd) {\n        const _proxy = new readable_stream_1.Transform({\n            objectMode: pOptions.objectMode,\n        });\n        _proxy._write = socketWrite;\n        _proxy._flush = socketEnd;\n        return _proxy;\n    }\n    function onOpen() {\n        stream.setReadable(proxy);\n        stream.setWritable(proxy);\n        stream.emit('connect');\n    }\n    function onClose() {\n        stream.end();\n        stream.destroy();\n    }\n    function onError(err) {\n        stream.destroy(err);\n    }\n    function onMessage(event) {\n        let { data } = event;\n        if (data instanceof ArrayBuffer)\n            data = buffer_1.Buffer.from(data);\n        else\n            data = buffer_1.Buffer.from(data, 'utf8');\n        proxy.push(data);\n    }\n    function writev(chunks, cb) {\n        const buffers = new Array(chunks.length);\n        for (let i = 0; i < chunks.length; i++) {\n            if (typeof chunks[i].chunk === 'string') {\n                buffers[i] = buffer_1.Buffer.from(chunks[i], 'utf8');\n            }\n            else {\n                buffers[i] = chunks[i].chunk;\n            }\n        }\n        this._write(buffer_1.Buffer.concat(buffers), 'binary', cb);\n    }\n    function socketWriteBrowser(chunk, enc, next) {\n        if (socket.bufferedAmount > bufferSize) {\n            setTimeout(socketWriteBrowser, bufferTimeout, chunk, enc, next);\n        }\n        if (coerceToBuffer && typeof chunk === 'string') {\n            chunk = buffer_1.Buffer.from(chunk, 'utf8');\n        }\n        try {\n            socket.send(chunk);\n        }\n        catch (err) {\n            return next(err);\n        }\n        next();\n    }\n    function socketEndBrowser(done) {\n        socket.close();\n        done();\n    }\n    return stream;\n};\nexports[\"default\"] = is_browser_1.default ? browserStreamBuilder : streamBuilder;\n//# sourceMappingURL=ws.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvY29ubmVjdC93cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLDZCQUE2QixtQkFBTyxDQUFDLDRDQUFJO0FBQ3pDLGdDQUFnQyxtQkFBTyxDQUFDLHNEQUFPO0FBQy9DLG9DQUFvQyxtQkFBTyxDQUFDLDBEQUFXO0FBQ3ZELDBCQUEwQixtQkFBTyxDQUFDLCtFQUFpQjtBQUNuRCxxQ0FBcUMsbUJBQU8sQ0FBQyx3RUFBZTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixjQUFjLEtBQUssY0FBYyxHQUFHLFVBQVUsRUFBRSxVQUFVO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQkFBaUIsRUFBRSxxQkFBcUI7QUFDL0Q7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLEtBQUssZ0JBQWdCLHFCQUFxQjtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLE9BQU87QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQkFBbUI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9jb25uZWN0L3dzLmpzPzE4YWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCB3c18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJ3c1wiKSk7XG5jb25zdCBkZWJ1Z18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkZWJ1Z1wiKSk7XG5jb25zdCBkdXBsZXhpZnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiZHVwbGV4aWZ5XCIpKTtcbmNvbnN0IHJlYWRhYmxlX3N0cmVhbV8xID0gcmVxdWlyZShcInJlYWRhYmxlLXN0cmVhbVwiKTtcbmNvbnN0IGlzX2Jyb3dzZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vaXMtYnJvd3NlclwiKSk7XG5jb25zdCBkZWJ1ZyA9ICgwLCBkZWJ1Z18xLmRlZmF1bHQpKCdtcXR0anM6d3MnKTtcbmNvbnN0IFdTU19PUFRJT05TID0gW1xuICAgICdyZWplY3RVbmF1dGhvcml6ZWQnLFxuICAgICdjYScsXG4gICAgJ2NlcnQnLFxuICAgICdrZXknLFxuICAgICdwZngnLFxuICAgICdwYXNzcGhyYXNlJyxcbl07XG5mdW5jdGlvbiBidWlsZFVybChvcHRzLCBjbGllbnQpIHtcbiAgICBsZXQgdXJsID0gYCR7b3B0cy5wcm90b2NvbH06Ly8ke29wdHMuaG9zdG5hbWV9OiR7b3B0cy5wb3J0fSR7b3B0cy5wYXRofWA7XG4gICAgaWYgKHR5cGVvZiBvcHRzLnRyYW5zZm9ybVdzVXJsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHVybCA9IG9wdHMudHJhbnNmb3JtV3NVcmwodXJsLCBvcHRzLCBjbGllbnQpO1xuICAgIH1cbiAgICByZXR1cm4gdXJsO1xufVxuZnVuY3Rpb24gc2V0RGVmYXVsdE9wdHMob3B0cykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRzO1xuICAgIGlmICghb3B0cy5ob3N0bmFtZSkge1xuICAgICAgICBvcHRpb25zLmhvc3RuYW1lID0gJ2xvY2FsaG9zdCc7XG4gICAgfVxuICAgIGlmICghb3B0cy5wb3J0KSB7XG4gICAgICAgIGlmIChvcHRzLnByb3RvY29sID09PSAnd3NzJykge1xuICAgICAgICAgICAgb3B0aW9ucy5wb3J0ID0gNDQzO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgb3B0aW9ucy5wb3J0ID0gODA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFvcHRzLnBhdGgpIHtcbiAgICAgICAgb3B0aW9ucy5wYXRoID0gJy8nO1xuICAgIH1cbiAgICBpZiAoIW9wdHMud3NPcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMud3NPcHRpb25zID0ge307XG4gICAgfVxuICAgIGlmICghaXNfYnJvd3Nlcl8xLmRlZmF1bHQgJiYgb3B0cy5wcm90b2NvbCA9PT0gJ3dzcycpIHtcbiAgICAgICAgV1NTX09QVElPTlMuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvcHRzLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob3B0cy53c09wdGlvbnMsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy53c09wdGlvbnNbcHJvcF0gPSBvcHRzW3Byb3BdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnM7XG59XG5mdW5jdGlvbiBzZXREZWZhdWx0QnJvd3Nlck9wdHMob3B0cykge1xuICAgIGNvbnN0IG9wdGlvbnMgPSBzZXREZWZhdWx0T3B0cyhvcHRzKTtcbiAgICBpZiAoIW9wdGlvbnMuaG9zdG5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5ob3N0bmFtZSA9IG9wdGlvbnMuaG9zdDtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLmhvc3RuYW1lKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBkZXRlcm1pbmUgaG9zdC4gU3BlY2lmeSBob3N0IG1hbnVhbGx5LicpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBVUkwoZG9jdW1lbnQuVVJMKTtcbiAgICAgICAgb3B0aW9ucy5ob3N0bmFtZSA9IHBhcnNlZC5ob3N0bmFtZTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnBvcnQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucG9ydCA9IE51bWJlcihwYXJzZWQucG9ydCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9wdGlvbnMub2JqZWN0TW9kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMub2JqZWN0TW9kZSA9ICEob3B0aW9ucy5iaW5hcnkgPT09IHRydWUgfHwgb3B0aW9ucy5iaW5hcnkgPT09IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHJldHVybiBvcHRpb25zO1xufVxuZnVuY3Rpb24gY3JlYXRlV2ViU29ja2V0KGNsaWVudCwgdXJsLCBvcHRzKSB7XG4gICAgZGVidWcoJ2NyZWF0ZVdlYlNvY2tldCcpO1xuICAgIGRlYnVnKGBwcm90b2NvbDogJHtvcHRzLnByb3RvY29sSWR9ICR7b3B0cy5wcm90b2NvbFZlcnNpb259YCk7XG4gICAgY29uc3Qgd2Vic29ja2V0U3ViUHJvdG9jb2wgPSBvcHRzLnByb3RvY29sSWQgPT09ICdNUUlzZHAnICYmIG9wdHMucHJvdG9jb2xWZXJzaW9uID09PSAzXG4gICAgICAgID8gJ21xdHR2My4xJ1xuICAgICAgICA6ICdtcXR0JztcbiAgICBkZWJ1ZyhgY3JlYXRpbmcgbmV3IFdlYnNvY2tldCBmb3IgdXJsOiAke3VybH0gYW5kIHByb3RvY29sOiAke3dlYnNvY2tldFN1YlByb3RvY29sfWApO1xuICAgIGNvbnN0IHNvY2tldCA9IG5ldyB3c18xLmRlZmF1bHQodXJsLCBbd2Vic29ja2V0U3ViUHJvdG9jb2xdLCBvcHRzLndzT3B0aW9ucyk7XG4gICAgcmV0dXJuIHNvY2tldDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJXZWJTb2NrZXQoY2xpZW50LCBvcHRzKSB7XG4gICAgY29uc3Qgd2Vic29ja2V0U3ViUHJvdG9jb2wgPSBvcHRzLnByb3RvY29sSWQgPT09ICdNUUlzZHAnICYmIG9wdHMucHJvdG9jb2xWZXJzaW9uID09PSAzXG4gICAgICAgID8gJ21xdHR2My4xJ1xuICAgICAgICA6ICdtcXR0JztcbiAgICBjb25zdCB1cmwgPSBidWlsZFVybChvcHRzLCBjbGllbnQpO1xuICAgIGNvbnN0IHNvY2tldCA9IG5ldyBXZWJTb2NrZXQodXJsLCBbd2Vic29ja2V0U3ViUHJvdG9jb2xdKTtcbiAgICBzb2NrZXQuYmluYXJ5VHlwZSA9ICdhcnJheWJ1ZmZlcic7XG4gICAgcmV0dXJuIHNvY2tldDtcbn1cbmNvbnN0IHN0cmVhbUJ1aWxkZXIgPSAoY2xpZW50LCBvcHRzKSA9PiB7XG4gICAgZGVidWcoJ3N0cmVhbUJ1aWxkZXInKTtcbiAgICBjb25zdCBvcHRpb25zID0gc2V0RGVmYXVsdE9wdHMob3B0cyk7XG4gICAgY29uc3QgdXJsID0gYnVpbGRVcmwob3B0aW9ucywgY2xpZW50KTtcbiAgICBjb25zdCBzb2NrZXQgPSBjcmVhdGVXZWJTb2NrZXQoY2xpZW50LCB1cmwsIG9wdGlvbnMpO1xuICAgIGNvbnN0IHdlYlNvY2tldFN0cmVhbSA9IHdzXzEuZGVmYXVsdC5jcmVhdGVXZWJTb2NrZXRTdHJlYW0oc29ja2V0LCBvcHRpb25zLndzT3B0aW9ucyk7XG4gICAgd2ViU29ja2V0U3RyZWFtWyd1cmwnXSA9IHVybDtcbiAgICBzb2NrZXQub24oJ2Nsb3NlJywgKCkgPT4ge1xuICAgICAgICB3ZWJTb2NrZXRTdHJlYW0uZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIHJldHVybiB3ZWJTb2NrZXRTdHJlYW07XG59O1xuY29uc3QgYnJvd3NlclN0cmVhbUJ1aWxkZXIgPSAoY2xpZW50LCBvcHRzKSA9PiB7XG4gICAgZGVidWcoJ2Jyb3dzZXJTdHJlYW1CdWlsZGVyJyk7XG4gICAgbGV0IHN0cmVhbTtcbiAgICBjb25zdCBvcHRpb25zID0gc2V0RGVmYXVsdEJyb3dzZXJPcHRzKG9wdHMpO1xuICAgIGNvbnN0IGJ1ZmZlclNpemUgPSBvcHRpb25zLmJyb3dzZXJCdWZmZXJTaXplIHx8IDEwMjQgKiA1MTI7XG4gICAgY29uc3QgYnVmZmVyVGltZW91dCA9IG9wdHMuYnJvd3NlckJ1ZmZlclRpbWVvdXQgfHwgMTAwMDtcbiAgICBjb25zdCBjb2VyY2VUb0J1ZmZlciA9ICFvcHRzLm9iamVjdE1vZGU7XG4gICAgY29uc3Qgc29ja2V0ID0gY3JlYXRlQnJvd3NlcldlYlNvY2tldChjbGllbnQsIG9wdHMpO1xuICAgIGNvbnN0IHByb3h5ID0gYnVpbGRQcm94eShvcHRzLCBzb2NrZXRXcml0ZUJyb3dzZXIsIHNvY2tldEVuZEJyb3dzZXIpO1xuICAgIGlmICghb3B0cy5vYmplY3RNb2RlKSB7XG4gICAgICAgIHByb3h5Ll93cml0ZXYgPSB3cml0ZXY7XG4gICAgfVxuICAgIHByb3h5Lm9uKCdjbG9zZScsICgpID0+IHtcbiAgICAgICAgc29ja2V0LmNsb3NlKCk7XG4gICAgfSk7XG4gICAgY29uc3QgZXZlbnRMaXN0ZW5lclN1cHBvcnQgPSB0eXBlb2Ygc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIgIT09ICd1bmRlZmluZWQnO1xuICAgIGlmIChzb2NrZXQucmVhZHlTdGF0ZSA9PT0gc29ja2V0Lk9QRU4pIHtcbiAgICAgICAgc3RyZWFtID0gcHJveHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHJlYW0gPSAoMCwgZHVwbGV4aWZ5XzEuZGVmYXVsdCkodW5kZWZpbmVkLCB1bmRlZmluZWQsIG9wdHMpO1xuICAgICAgICBpZiAoIW9wdHMub2JqZWN0TW9kZSkge1xuICAgICAgICAgICAgc3RyZWFtLl93cml0ZXYgPSB3cml0ZXY7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV2ZW50TGlzdGVuZXJTdXBwb3J0KSB7XG4gICAgICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignb3BlbicsIG9uT3Blbik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzb2NrZXQub25vcGVuID0gb25PcGVuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHN0cmVhbS5zb2NrZXQgPSBzb2NrZXQ7XG4gICAgaWYgKGV2ZW50TGlzdGVuZXJTdXBwb3J0KSB7XG4gICAgICAgIHNvY2tldC5hZGRFdmVudExpc3RlbmVyKCdjbG9zZScsIG9uQ2xvc2UpO1xuICAgICAgICBzb2NrZXQuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBvbkVycm9yKTtcbiAgICAgICAgc29ja2V0LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBvbk1lc3NhZ2UpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc29ja2V0Lm9uY2xvc2UgPSBvbkNsb3NlO1xuICAgICAgICBzb2NrZXQub25lcnJvciA9IG9uRXJyb3I7XG4gICAgICAgIHNvY2tldC5vbm1lc3NhZ2UgPSBvbk1lc3NhZ2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGJ1aWxkUHJveHkocE9wdGlvbnMsIHNvY2tldFdyaXRlLCBzb2NrZXRFbmQpIHtcbiAgICAgICAgY29uc3QgX3Byb3h5ID0gbmV3IHJlYWRhYmxlX3N0cmVhbV8xLlRyYW5zZm9ybSh7XG4gICAgICAgICAgICBvYmplY3RNb2RlOiBwT3B0aW9ucy5vYmplY3RNb2RlLFxuICAgICAgICB9KTtcbiAgICAgICAgX3Byb3h5Ll93cml0ZSA9IHNvY2tldFdyaXRlO1xuICAgICAgICBfcHJveHkuX2ZsdXNoID0gc29ja2V0RW5kO1xuICAgICAgICByZXR1cm4gX3Byb3h5O1xuICAgIH1cbiAgICBmdW5jdGlvbiBvbk9wZW4oKSB7XG4gICAgICAgIHN0cmVhbS5zZXRSZWFkYWJsZShwcm94eSk7XG4gICAgICAgIHN0cmVhbS5zZXRXcml0YWJsZShwcm94eSk7XG4gICAgICAgIHN0cmVhbS5lbWl0KCdjb25uZWN0Jyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG9uQ2xvc2UoKSB7XG4gICAgICAgIHN0cmVhbS5lbmQoKTtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25FcnJvcihlcnIpIHtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3koZXJyKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gb25NZXNzYWdlKGV2ZW50KSB7XG4gICAgICAgIGxldCB7IGRhdGEgfSA9IGV2ZW50O1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICAgICAgZGF0YSA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkYXRhID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oZGF0YSwgJ3V0ZjgnKTtcbiAgICAgICAgcHJveHkucHVzaChkYXRhKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gd3JpdGV2KGNodW5rcywgY2IpIHtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IG5ldyBBcnJheShjaHVua3MubGVuZ3RoKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaHVua3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY2h1bmtzW2ldLmNodW5rID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnNbaV0gPSBidWZmZXJfMS5CdWZmZXIuZnJvbShjaHVua3NbaV0sICd1dGY4Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBidWZmZXJzW2ldID0gY2h1bmtzW2ldLmNodW5rO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3dyaXRlKGJ1ZmZlcl8xLkJ1ZmZlci5jb25jYXQoYnVmZmVycyksICdiaW5hcnknLCBjYik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNvY2tldFdyaXRlQnJvd3NlcihjaHVuaywgZW5jLCBuZXh0KSB7XG4gICAgICAgIGlmIChzb2NrZXQuYnVmZmVyZWRBbW91bnQgPiBidWZmZXJTaXplKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHNvY2tldFdyaXRlQnJvd3NlciwgYnVmZmVyVGltZW91dCwgY2h1bmssIGVuYywgbmV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvZXJjZVRvQnVmZmVyICYmIHR5cGVvZiBjaHVuayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNodW5rID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oY2h1bmssICd1dGY4Jyk7XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNvY2tldC5zZW5kKGNodW5rKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV4dChlcnIpO1xuICAgICAgICB9XG4gICAgICAgIG5leHQoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc29ja2V0RW5kQnJvd3Nlcihkb25lKSB7XG4gICAgICAgIHNvY2tldC5jbG9zZSgpO1xuICAgICAgICBkb25lKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHJlYW07XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaXNfYnJvd3Nlcl8xLmRlZmF1bHQgPyBicm93c2VyU3RyZWFtQnVpbGRlciA6IHN0cmVhbUJ1aWxkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/connect/ws.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/connect/wx.js":
/*!***************************************************!*\
  !*** ./node_modules/mqtt/build/lib/connect/wx.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst readable_stream_1 = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\nconst duplexify_1 = __importDefault(__webpack_require__(/*! duplexify */ \"(ssr)/./node_modules/duplexify/index.js\"));\nlet socketTask;\nlet proxy;\nlet stream;\nfunction buildProxy() {\n    const _proxy = new readable_stream_1.Transform();\n    _proxy._write = (chunk, encoding, next) => {\n        socketTask.send({\n            data: chunk.buffer,\n            success() {\n                next();\n            },\n            fail(errMsg) {\n                next(new Error(errMsg));\n            },\n        });\n    };\n    _proxy._flush = (done) => {\n        socketTask.close({\n            success() {\n                done();\n            },\n        });\n    };\n    return _proxy;\n}\nfunction setDefaultOpts(opts) {\n    if (!opts.hostname) {\n        opts.hostname = 'localhost';\n    }\n    if (!opts.path) {\n        opts.path = '/';\n    }\n    if (!opts.wsOptions) {\n        opts.wsOptions = {};\n    }\n}\nfunction buildUrl(opts, client) {\n    const protocol = opts.protocol === 'wxs' ? 'wss' : 'ws';\n    let url = `${protocol}://${opts.hostname}${opts.path}`;\n    if (opts.port && opts.port !== 80 && opts.port !== 443) {\n        url = `${protocol}://${opts.hostname}:${opts.port}${opts.path}`;\n    }\n    if (typeof opts.transformWsUrl === 'function') {\n        url = opts.transformWsUrl(url, opts, client);\n    }\n    return url;\n}\nfunction bindEventHandler() {\n    socketTask.onOpen(() => {\n        stream.setReadable(proxy);\n        stream.setWritable(proxy);\n        stream.emit('connect');\n    });\n    socketTask.onMessage((res) => {\n        let { data } = res;\n        if (data instanceof ArrayBuffer)\n            data = buffer_1.Buffer.from(data);\n        else\n            data = buffer_1.Buffer.from(data, 'utf8');\n        proxy.push(data);\n    });\n    socketTask.onClose(() => {\n        stream.emit('close');\n        stream.end();\n        stream.destroy();\n    });\n    socketTask.onError((res) => {\n        stream.destroy(new Error(res.errMsg));\n    });\n}\nconst buildStream = (client, opts) => {\n    opts.hostname = opts.hostname || opts.host;\n    if (!opts.hostname) {\n        throw new Error('Could not determine host. Specify host manually.');\n    }\n    const websocketSubProtocol = opts.protocolId === 'MQIsdp' && opts.protocolVersion === 3\n        ? 'mqttv3.1'\n        : 'mqtt';\n    setDefaultOpts(opts);\n    const url = buildUrl(opts, client);\n    socketTask = wx.connectSocket({\n        url,\n        protocols: [websocketSubProtocol],\n    });\n    proxy = buildProxy();\n    stream = duplexify_1.default.obj();\n    stream._destroy = (err, cb) => {\n        socketTask.close({\n            success() {\n                if (cb)\n                    cb(err);\n            },\n        });\n    };\n    const destroyRef = stream.destroy;\n    stream.destroy = () => {\n        stream.destroy = destroyRef;\n        setTimeout(() => {\n            socketTask.close({\n                fail() {\n                    stream._destroy(new Error());\n                },\n            });\n        }, 0);\n    };\n    bindEventHandler();\n    return stream;\n};\nexports[\"default\"] = buildStream;\n//# sourceMappingURL=wx.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvY29ubmVjdC93eC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQixtQkFBTyxDQUFDLHNCQUFRO0FBQ2pDLDBCQUEwQixtQkFBTyxDQUFDLCtFQUFpQjtBQUNuRCxvQ0FBb0MsbUJBQU8sQ0FBQywwREFBVztBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixTQUFTLEtBQUssY0FBYyxFQUFFLFVBQVU7QUFDekQ7QUFDQSxpQkFBaUIsU0FBUyxLQUFLLGNBQWMsR0FBRyxVQUFVLEVBQUUsVUFBVTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsY0FBYyxPQUFPO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW90X2NoZWNrLy4vbm9kZV9tb2R1bGVzL21xdHQvYnVpbGQvbGliL2Nvbm5lY3Qvd3guanM/ZmY5NSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGJ1ZmZlcl8xID0gcmVxdWlyZShcImJ1ZmZlclwiKTtcbmNvbnN0IHJlYWRhYmxlX3N0cmVhbV8xID0gcmVxdWlyZShcInJlYWRhYmxlLXN0cmVhbVwiKTtcbmNvbnN0IGR1cGxleGlmeV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJkdXBsZXhpZnlcIikpO1xubGV0IHNvY2tldFRhc2s7XG5sZXQgcHJveHk7XG5sZXQgc3RyZWFtO1xuZnVuY3Rpb24gYnVpbGRQcm94eSgpIHtcbiAgICBjb25zdCBfcHJveHkgPSBuZXcgcmVhZGFibGVfc3RyZWFtXzEuVHJhbnNmb3JtKCk7XG4gICAgX3Byb3h5Ll93cml0ZSA9IChjaHVuaywgZW5jb2RpbmcsIG5leHQpID0+IHtcbiAgICAgICAgc29ja2V0VGFzay5zZW5kKHtcbiAgICAgICAgICAgIGRhdGE6IGNodW5rLmJ1ZmZlcixcbiAgICAgICAgICAgIHN1Y2Nlc3MoKSB7XG4gICAgICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZhaWwoZXJyTXNnKSB7XG4gICAgICAgICAgICAgICAgbmV4dChuZXcgRXJyb3IoZXJyTXNnKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIF9wcm94eS5fZmx1c2ggPSAoZG9uZSkgPT4ge1xuICAgICAgICBzb2NrZXRUYXNrLmNsb3NlKHtcbiAgICAgICAgICAgIHN1Y2Nlc3MoKSB7XG4gICAgICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gX3Byb3h5O1xufVxuZnVuY3Rpb24gc2V0RGVmYXVsdE9wdHMob3B0cykge1xuICAgIGlmICghb3B0cy5ob3N0bmFtZSkge1xuICAgICAgICBvcHRzLmhvc3RuYW1lID0gJ2xvY2FsaG9zdCc7XG4gICAgfVxuICAgIGlmICghb3B0cy5wYXRoKSB7XG4gICAgICAgIG9wdHMucGF0aCA9ICcvJztcbiAgICB9XG4gICAgaWYgKCFvcHRzLndzT3B0aW9ucykge1xuICAgICAgICBvcHRzLndzT3B0aW9ucyA9IHt9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGJ1aWxkVXJsKG9wdHMsIGNsaWVudCkge1xuICAgIGNvbnN0IHByb3RvY29sID0gb3B0cy5wcm90b2NvbCA9PT0gJ3d4cycgPyAnd3NzJyA6ICd3cyc7XG4gICAgbGV0IHVybCA9IGAke3Byb3RvY29sfTovLyR7b3B0cy5ob3N0bmFtZX0ke29wdHMucGF0aH1gO1xuICAgIGlmIChvcHRzLnBvcnQgJiYgb3B0cy5wb3J0ICE9PSA4MCAmJiBvcHRzLnBvcnQgIT09IDQ0Mykge1xuICAgICAgICB1cmwgPSBgJHtwcm90b2NvbH06Ly8ke29wdHMuaG9zdG5hbWV9OiR7b3B0cy5wb3J0fSR7b3B0cy5wYXRofWA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0cy50cmFuc2Zvcm1Xc1VybCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB1cmwgPSBvcHRzLnRyYW5zZm9ybVdzVXJsKHVybCwgb3B0cywgY2xpZW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHVybDtcbn1cbmZ1bmN0aW9uIGJpbmRFdmVudEhhbmRsZXIoKSB7XG4gICAgc29ja2V0VGFzay5vbk9wZW4oKCkgPT4ge1xuICAgICAgICBzdHJlYW0uc2V0UmVhZGFibGUocHJveHkpO1xuICAgICAgICBzdHJlYW0uc2V0V3JpdGFibGUocHJveHkpO1xuICAgICAgICBzdHJlYW0uZW1pdCgnY29ubmVjdCcpO1xuICAgIH0pO1xuICAgIHNvY2tldFRhc2sub25NZXNzYWdlKChyZXMpID0+IHtcbiAgICAgICAgbGV0IHsgZGF0YSB9ID0gcmVzO1xuICAgICAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKVxuICAgICAgICAgICAgZGF0YSA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGRhdGEpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBkYXRhID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oZGF0YSwgJ3V0ZjgnKTtcbiAgICAgICAgcHJveHkucHVzaChkYXRhKTtcbiAgICB9KTtcbiAgICBzb2NrZXRUYXNrLm9uQ2xvc2UoKCkgPT4ge1xuICAgICAgICBzdHJlYW0uZW1pdCgnY2xvc2UnKTtcbiAgICAgICAgc3RyZWFtLmVuZCgpO1xuICAgICAgICBzdHJlYW0uZGVzdHJveSgpO1xuICAgIH0pO1xuICAgIHNvY2tldFRhc2sub25FcnJvcigocmVzKSA9PiB7XG4gICAgICAgIHN0cmVhbS5kZXN0cm95KG5ldyBFcnJvcihyZXMuZXJyTXNnKSk7XG4gICAgfSk7XG59XG5jb25zdCBidWlsZFN0cmVhbSA9IChjbGllbnQsIG9wdHMpID0+IHtcbiAgICBvcHRzLmhvc3RuYW1lID0gb3B0cy5ob3N0bmFtZSB8fCBvcHRzLmhvc3Q7XG4gICAgaWYgKCFvcHRzLmhvc3RuYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGRldGVybWluZSBob3N0LiBTcGVjaWZ5IGhvc3QgbWFudWFsbHkuJyk7XG4gICAgfVxuICAgIGNvbnN0IHdlYnNvY2tldFN1YlByb3RvY29sID0gb3B0cy5wcm90b2NvbElkID09PSAnTVFJc2RwJyAmJiBvcHRzLnByb3RvY29sVmVyc2lvbiA9PT0gM1xuICAgICAgICA/ICdtcXR0djMuMSdcbiAgICAgICAgOiAnbXF0dCc7XG4gICAgc2V0RGVmYXVsdE9wdHMob3B0cyk7XG4gICAgY29uc3QgdXJsID0gYnVpbGRVcmwob3B0cywgY2xpZW50KTtcbiAgICBzb2NrZXRUYXNrID0gd3guY29ubmVjdFNvY2tldCh7XG4gICAgICAgIHVybCxcbiAgICAgICAgcHJvdG9jb2xzOiBbd2Vic29ja2V0U3ViUHJvdG9jb2xdLFxuICAgIH0pO1xuICAgIHByb3h5ID0gYnVpbGRQcm94eSgpO1xuICAgIHN0cmVhbSA9IGR1cGxleGlmeV8xLmRlZmF1bHQub2JqKCk7XG4gICAgc3RyZWFtLl9kZXN0cm95ID0gKGVyciwgY2IpID0+IHtcbiAgICAgICAgc29ja2V0VGFzay5jbG9zZSh7XG4gICAgICAgICAgICBzdWNjZXNzKCkge1xuICAgICAgICAgICAgICAgIGlmIChjYilcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgZGVzdHJveVJlZiA9IHN0cmVhbS5kZXN0cm95O1xuICAgIHN0cmVhbS5kZXN0cm95ID0gKCkgPT4ge1xuICAgICAgICBzdHJlYW0uZGVzdHJveSA9IGRlc3Ryb3lSZWY7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgc29ja2V0VGFzay5jbG9zZSh7XG4gICAgICAgICAgICAgICAgZmFpbCgpIHtcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtLl9kZXN0cm95KG5ldyBFcnJvcigpKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIDApO1xuICAgIH07XG4gICAgYmluZEV2ZW50SGFuZGxlcigpO1xuICAgIHJldHVybiBzdHJlYW07XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gYnVpbGRTdHJlYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD13eC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/connect/wx.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/default-message-id-provider.js":
/*!********************************************************************!*\
  !*** ./node_modules/mqtt/build/lib/default-message-id-provider.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass DefaultMessageIdProvider {\n    constructor() {\n        this.nextId = Math.max(1, Math.floor(Math.random() * 65535));\n    }\n    allocate() {\n        const id = this.nextId++;\n        if (this.nextId === 65536) {\n            this.nextId = 1;\n        }\n        return id;\n    }\n    getLastAllocated() {\n        return this.nextId === 1 ? 65535 : this.nextId - 1;\n    }\n    register(messageId) {\n        return true;\n    }\n    deallocate(messageId) { }\n    clear() { }\n}\nexports[\"default\"] = DefaultMessageIdProvider;\n//# sourceMappingURL=default-message-id-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvZGVmYXVsdC1tZXNzYWdlLWlkLXByb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW90X2NoZWNrLy4vbm9kZV9tb2R1bGVzL21xdHQvYnVpbGQvbGliL2RlZmF1bHQtbWVzc2FnZS1pZC1wcm92aWRlci5qcz8zNDNlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgRGVmYXVsdE1lc3NhZ2VJZFByb3ZpZGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5uZXh0SWQgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2NTUzNSkpO1xuICAgIH1cbiAgICBhbGxvY2F0ZSgpIHtcbiAgICAgICAgY29uc3QgaWQgPSB0aGlzLm5leHRJZCsrO1xuICAgICAgICBpZiAodGhpcy5uZXh0SWQgPT09IDY1NTM2KSB7XG4gICAgICAgICAgICB0aGlzLm5leHRJZCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBnZXRMYXN0QWxsb2NhdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uZXh0SWQgPT09IDEgPyA2NTUzNSA6IHRoaXMubmV4dElkIC0gMTtcbiAgICB9XG4gICAgcmVnaXN0ZXIobWVzc2FnZUlkKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBkZWFsbG9jYXRlKG1lc3NhZ2VJZCkgeyB9XG4gICAgY2xlYXIoKSB7IH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IERlZmF1bHRNZXNzYWdlSWRQcm92aWRlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHQtbWVzc2FnZS1pZC1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/default-message-id-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/handlers/ack.js":
/*!*****************************************************!*\
  !*** ./node_modules/mqtt/build/lib/handlers/ack.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReasonCodes = void 0;\nexports.ReasonCodes = {\n    0: '',\n    1: 'Unacceptable protocol version',\n    2: 'Identifier rejected',\n    3: 'Server unavailable',\n    4: 'Bad username or password',\n    5: 'Not authorized',\n    16: 'No matching subscribers',\n    17: 'No subscription existed',\n    128: 'Unspecified error',\n    129: 'Malformed Packet',\n    130: 'Protocol Error',\n    131: 'Implementation specific error',\n    132: 'Unsupported Protocol Version',\n    133: 'Client Identifier not valid',\n    134: 'Bad User Name or Password',\n    135: 'Not authorized',\n    136: 'Server unavailable',\n    137: 'Server busy',\n    138: 'Banned',\n    139: 'Server shutting down',\n    140: 'Bad authentication method',\n    141: 'Keep Alive timeout',\n    142: 'Session taken over',\n    143: 'Topic Filter invalid',\n    144: 'Topic Name invalid',\n    145: 'Packet identifier in use',\n    146: 'Packet Identifier not found',\n    147: 'Receive Maximum exceeded',\n    148: 'Topic Alias invalid',\n    149: 'Packet too large',\n    150: 'Message rate too high',\n    151: 'Quota exceeded',\n    152: 'Administrative action',\n    153: 'Payload format invalid',\n    154: 'Retain not supported',\n    155: 'QoS not supported',\n    156: 'Use another server',\n    157: 'Server moved',\n    158: 'Shared Subscriptions not supported',\n    159: 'Connection rate exceeded',\n    160: 'Maximum connect time',\n    161: 'Subscription Identifiers not supported',\n    162: 'Wildcard Subscriptions not supported',\n};\nconst handleAck = (client, packet) => {\n    const { messageId } = packet;\n    const type = packet.cmd;\n    let response = null;\n    const cb = client.outgoing[messageId] ? client.outgoing[messageId].cb : null;\n    let err;\n    if (!cb) {\n        client.log('_handleAck :: Server sent an ack in error. Ignoring.');\n        return;\n    }\n    client.log('_handleAck :: packet type', type);\n    switch (type) {\n        case 'pubcomp':\n        case 'puback': {\n            const pubackRC = packet.reasonCode;\n            if (pubackRC && pubackRC > 0 && pubackRC !== 16) {\n                err = new Error(`Publish error: ${exports.ReasonCodes[pubackRC]}`);\n                err.code = pubackRC;\n                client['_removeOutgoingAndStoreMessage'](messageId, () => {\n                    cb(err, packet);\n                });\n            }\n            else {\n                client['_removeOutgoingAndStoreMessage'](messageId, cb);\n            }\n            break;\n        }\n        case 'pubrec': {\n            response = {\n                cmd: 'pubrel',\n                qos: 2,\n                messageId,\n            };\n            const pubrecRC = packet.reasonCode;\n            if (pubrecRC && pubrecRC > 0 && pubrecRC !== 16) {\n                err = new Error(`Publish error: ${exports.ReasonCodes[pubrecRC]}`);\n                err.code = pubrecRC;\n                client['_removeOutgoingAndStoreMessage'](messageId, () => {\n                    cb(err, packet);\n                });\n            }\n            else {\n                client['_sendPacket'](response);\n            }\n            break;\n        }\n        case 'suback': {\n            delete client.outgoing[messageId];\n            client.messageIdProvider.deallocate(messageId);\n            const granted = packet.granted;\n            for (let grantedI = 0; grantedI < granted.length; grantedI++) {\n                if ((granted[grantedI] & 0x80) !== 0) {\n                    const topics = client.messageIdToTopic[messageId];\n                    if (topics) {\n                        topics.forEach((topic) => {\n                            delete client['_resubscribeTopics'][topic];\n                        });\n                    }\n                }\n            }\n            delete client.messageIdToTopic[messageId];\n            client['_invokeStoreProcessingQueue']();\n            cb(null, packet);\n            break;\n        }\n        case 'unsuback': {\n            delete client.outgoing[messageId];\n            client.messageIdProvider.deallocate(messageId);\n            client['_invokeStoreProcessingQueue']();\n            cb(null);\n            break;\n        }\n        default:\n            client.emit('error', new Error('unrecognized packet type'));\n    }\n    if (client.disconnecting && Object.keys(client.outgoing).length === 0) {\n        client.emit('outgoingEmpty');\n    }\n};\nexports[\"default\"] = handleAck;\n//# sourceMappingURL=ack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaGFuZGxlcnMvYWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsOEJBQThCO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELDhCQUE4QjtBQUNoRjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsMkJBQTJCO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW90X2NoZWNrLy4vbm9kZV9tb2R1bGVzL21xdHQvYnVpbGQvbGliL2hhbmRsZXJzL2Fjay5qcz83NjEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWFzb25Db2RlcyA9IHZvaWQgMDtcbmV4cG9ydHMuUmVhc29uQ29kZXMgPSB7XG4gICAgMDogJycsXG4gICAgMTogJ1VuYWNjZXB0YWJsZSBwcm90b2NvbCB2ZXJzaW9uJyxcbiAgICAyOiAnSWRlbnRpZmllciByZWplY3RlZCcsXG4gICAgMzogJ1NlcnZlciB1bmF2YWlsYWJsZScsXG4gICAgNDogJ0JhZCB1c2VybmFtZSBvciBwYXNzd29yZCcsXG4gICAgNTogJ05vdCBhdXRob3JpemVkJyxcbiAgICAxNjogJ05vIG1hdGNoaW5nIHN1YnNjcmliZXJzJyxcbiAgICAxNzogJ05vIHN1YnNjcmlwdGlvbiBleGlzdGVkJyxcbiAgICAxMjg6ICdVbnNwZWNpZmllZCBlcnJvcicsXG4gICAgMTI5OiAnTWFsZm9ybWVkIFBhY2tldCcsXG4gICAgMTMwOiAnUHJvdG9jb2wgRXJyb3InLFxuICAgIDEzMTogJ0ltcGxlbWVudGF0aW9uIHNwZWNpZmljIGVycm9yJyxcbiAgICAxMzI6ICdVbnN1cHBvcnRlZCBQcm90b2NvbCBWZXJzaW9uJyxcbiAgICAxMzM6ICdDbGllbnQgSWRlbnRpZmllciBub3QgdmFsaWQnLFxuICAgIDEzNDogJ0JhZCBVc2VyIE5hbWUgb3IgUGFzc3dvcmQnLFxuICAgIDEzNTogJ05vdCBhdXRob3JpemVkJyxcbiAgICAxMzY6ICdTZXJ2ZXIgdW5hdmFpbGFibGUnLFxuICAgIDEzNzogJ1NlcnZlciBidXN5JyxcbiAgICAxMzg6ICdCYW5uZWQnLFxuICAgIDEzOTogJ1NlcnZlciBzaHV0dGluZyBkb3duJyxcbiAgICAxNDA6ICdCYWQgYXV0aGVudGljYXRpb24gbWV0aG9kJyxcbiAgICAxNDE6ICdLZWVwIEFsaXZlIHRpbWVvdXQnLFxuICAgIDE0MjogJ1Nlc3Npb24gdGFrZW4gb3ZlcicsXG4gICAgMTQzOiAnVG9waWMgRmlsdGVyIGludmFsaWQnLFxuICAgIDE0NDogJ1RvcGljIE5hbWUgaW52YWxpZCcsXG4gICAgMTQ1OiAnUGFja2V0IGlkZW50aWZpZXIgaW4gdXNlJyxcbiAgICAxNDY6ICdQYWNrZXQgSWRlbnRpZmllciBub3QgZm91bmQnLFxuICAgIDE0NzogJ1JlY2VpdmUgTWF4aW11bSBleGNlZWRlZCcsXG4gICAgMTQ4OiAnVG9waWMgQWxpYXMgaW52YWxpZCcsXG4gICAgMTQ5OiAnUGFja2V0IHRvbyBsYXJnZScsXG4gICAgMTUwOiAnTWVzc2FnZSByYXRlIHRvbyBoaWdoJyxcbiAgICAxNTE6ICdRdW90YSBleGNlZWRlZCcsXG4gICAgMTUyOiAnQWRtaW5pc3RyYXRpdmUgYWN0aW9uJyxcbiAgICAxNTM6ICdQYXlsb2FkIGZvcm1hdCBpbnZhbGlkJyxcbiAgICAxNTQ6ICdSZXRhaW4gbm90IHN1cHBvcnRlZCcsXG4gICAgMTU1OiAnUW9TIG5vdCBzdXBwb3J0ZWQnLFxuICAgIDE1NjogJ1VzZSBhbm90aGVyIHNlcnZlcicsXG4gICAgMTU3OiAnU2VydmVyIG1vdmVkJyxcbiAgICAxNTg6ICdTaGFyZWQgU3Vic2NyaXB0aW9ucyBub3Qgc3VwcG9ydGVkJyxcbiAgICAxNTk6ICdDb25uZWN0aW9uIHJhdGUgZXhjZWVkZWQnLFxuICAgIDE2MDogJ01heGltdW0gY29ubmVjdCB0aW1lJyxcbiAgICAxNjE6ICdTdWJzY3JpcHRpb24gSWRlbnRpZmllcnMgbm90IHN1cHBvcnRlZCcsXG4gICAgMTYyOiAnV2lsZGNhcmQgU3Vic2NyaXB0aW9ucyBub3Qgc3VwcG9ydGVkJyxcbn07XG5jb25zdCBoYW5kbGVBY2sgPSAoY2xpZW50LCBwYWNrZXQpID0+IHtcbiAgICBjb25zdCB7IG1lc3NhZ2VJZCB9ID0gcGFja2V0O1xuICAgIGNvbnN0IHR5cGUgPSBwYWNrZXQuY21kO1xuICAgIGxldCByZXNwb25zZSA9IG51bGw7XG4gICAgY29uc3QgY2IgPSBjbGllbnQub3V0Z29pbmdbbWVzc2FnZUlkXSA/IGNsaWVudC5vdXRnb2luZ1ttZXNzYWdlSWRdLmNiIDogbnVsbDtcbiAgICBsZXQgZXJyO1xuICAgIGlmICghY2IpIHtcbiAgICAgICAgY2xpZW50LmxvZygnX2hhbmRsZUFjayA6OiBTZXJ2ZXIgc2VudCBhbiBhY2sgaW4gZXJyb3IuIElnbm9yaW5nLicpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsaWVudC5sb2coJ19oYW5kbGVBY2sgOjogcGFja2V0IHR5cGUnLCB0eXBlKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAncHViY29tcCc6XG4gICAgICAgIGNhc2UgJ3B1YmFjayc6IHtcbiAgICAgICAgICAgIGNvbnN0IHB1YmFja1JDID0gcGFja2V0LnJlYXNvbkNvZGU7XG4gICAgICAgICAgICBpZiAocHViYWNrUkMgJiYgcHViYWNrUkMgPiAwICYmIHB1YmFja1JDICE9PSAxNikge1xuICAgICAgICAgICAgICAgIGVyciA9IG5ldyBFcnJvcihgUHVibGlzaCBlcnJvcjogJHtleHBvcnRzLlJlYXNvbkNvZGVzW3B1YmFja1JDXX1gKTtcbiAgICAgICAgICAgICAgICBlcnIuY29kZSA9IHB1YmFja1JDO1xuICAgICAgICAgICAgICAgIGNsaWVudFsnX3JlbW92ZU91dGdvaW5nQW5kU3RvcmVNZXNzYWdlJ10obWVzc2FnZUlkLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNiKGVyciwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsaWVudFsnX3JlbW92ZU91dGdvaW5nQW5kU3RvcmVNZXNzYWdlJ10obWVzc2FnZUlkLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdwdWJyZWMnOiB7XG4gICAgICAgICAgICByZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICBjbWQ6ICdwdWJyZWwnLFxuICAgICAgICAgICAgICAgIHFvczogMixcbiAgICAgICAgICAgICAgICBtZXNzYWdlSWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgcHVicmVjUkMgPSBwYWNrZXQucmVhc29uQ29kZTtcbiAgICAgICAgICAgIGlmIChwdWJyZWNSQyAmJiBwdWJyZWNSQyA+IDAgJiYgcHVicmVjUkMgIT09IDE2KSB7XG4gICAgICAgICAgICAgICAgZXJyID0gbmV3IEVycm9yKGBQdWJsaXNoIGVycm9yOiAke2V4cG9ydHMuUmVhc29uQ29kZXNbcHVicmVjUkNdfWApO1xuICAgICAgICAgICAgICAgIGVyci5jb2RlID0gcHVicmVjUkM7XG4gICAgICAgICAgICAgICAgY2xpZW50WydfcmVtb3ZlT3V0Z29pbmdBbmRTdG9yZU1lc3NhZ2UnXShtZXNzYWdlSWQsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2IoZXJyLCBwYWNrZXQpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY2xpZW50Wydfc2VuZFBhY2tldCddKHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ3N1YmFjayc6IHtcbiAgICAgICAgICAgIGRlbGV0ZSBjbGllbnQub3V0Z29pbmdbbWVzc2FnZUlkXTtcbiAgICAgICAgICAgIGNsaWVudC5tZXNzYWdlSWRQcm92aWRlci5kZWFsbG9jYXRlKG1lc3NhZ2VJZCk7XG4gICAgICAgICAgICBjb25zdCBncmFudGVkID0gcGFja2V0LmdyYW50ZWQ7XG4gICAgICAgICAgICBmb3IgKGxldCBncmFudGVkSSA9IDA7IGdyYW50ZWRJIDwgZ3JhbnRlZC5sZW5ndGg7IGdyYW50ZWRJKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoKGdyYW50ZWRbZ3JhbnRlZEldICYgMHg4MCkgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9waWNzID0gY2xpZW50Lm1lc3NhZ2VJZFRvVG9waWNbbWVzc2FnZUlkXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRvcGljcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9waWNzLmZvckVhY2goKHRvcGljKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGNsaWVudFsnX3Jlc3Vic2NyaWJlVG9waWNzJ11bdG9waWNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWxldGUgY2xpZW50Lm1lc3NhZ2VJZFRvVG9waWNbbWVzc2FnZUlkXTtcbiAgICAgICAgICAgIGNsaWVudFsnX2ludm9rZVN0b3JlUHJvY2Vzc2luZ1F1ZXVlJ10oKTtcbiAgICAgICAgICAgIGNiKG51bGwsIHBhY2tldCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICd1bnN1YmFjayc6IHtcbiAgICAgICAgICAgIGRlbGV0ZSBjbGllbnQub3V0Z29pbmdbbWVzc2FnZUlkXTtcbiAgICAgICAgICAgIGNsaWVudC5tZXNzYWdlSWRQcm92aWRlci5kZWFsbG9jYXRlKG1lc3NhZ2VJZCk7XG4gICAgICAgICAgICBjbGllbnRbJ19pbnZva2VTdG9yZVByb2Nlc3NpbmdRdWV1ZSddKCk7XG4gICAgICAgICAgICBjYihudWxsKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjbGllbnQuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3VucmVjb2duaXplZCBwYWNrZXQgdHlwZScpKTtcbiAgICB9XG4gICAgaWYgKGNsaWVudC5kaXNjb25uZWN0aW5nICYmIE9iamVjdC5rZXlzKGNsaWVudC5vdXRnb2luZykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNsaWVudC5lbWl0KCdvdXRnb2luZ0VtcHR5Jyk7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhbmRsZUFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/handlers/ack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/handlers/auth.js":
/*!******************************************************!*\
  !*** ./node_modules/mqtt/build/lib/handlers/auth.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst shared_1 = __webpack_require__(/*! ../shared */ \"(ssr)/./node_modules/mqtt/build/lib/shared.js\");\nconst ack_1 = __webpack_require__(/*! ./ack */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/ack.js\");\nconst handleAuth = (client, packet) => {\n    const { options } = client;\n    const version = options.protocolVersion;\n    const rc = version === 5 ? packet.reasonCode : packet.returnCode;\n    if (version !== 5) {\n        const err = new shared_1.ErrorWithReasonCode(`Protocol error: Auth packets are only supported in MQTT 5. Your version:${version}`, rc);\n        client.emit('error', err);\n        return;\n    }\n    client.handleAuth(packet, (err, packet2) => {\n        if (err) {\n            client.emit('error', err);\n            return;\n        }\n        if (rc === 24) {\n            client.reconnecting = false;\n            client['_sendPacket'](packet2);\n        }\n        else {\n            const error = new shared_1.ErrorWithReasonCode(`Connection refused: ${ack_1.ReasonCodes[rc]}`, rc);\n            client.emit('error', error);\n        }\n    });\n};\nexports[\"default\"] = handleAuth;\n//# sourceMappingURL=auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaGFuZGxlcnMvYXV0aC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUIsbUJBQU8sQ0FBQyxnRUFBVztBQUNwQyxjQUFjLG1CQUFPLENBQUMsa0VBQU87QUFDN0I7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0EsZ0lBQWdJLFFBQVE7QUFDeEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBa0Ysc0JBQXNCO0FBQ3hHO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW90X2NoZWNrLy4vbm9kZV9tb2R1bGVzL21xdHQvYnVpbGQvbGliL2hhbmRsZXJzL2F1dGguanM/OWNlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IHNoYXJlZF8xID0gcmVxdWlyZShcIi4uL3NoYXJlZFwiKTtcbmNvbnN0IGFja18xID0gcmVxdWlyZShcIi4vYWNrXCIpO1xuY29uc3QgaGFuZGxlQXV0aCA9IChjbGllbnQsIHBhY2tldCkgPT4ge1xuICAgIGNvbnN0IHsgb3B0aW9ucyB9ID0gY2xpZW50O1xuICAgIGNvbnN0IHZlcnNpb24gPSBvcHRpb25zLnByb3RvY29sVmVyc2lvbjtcbiAgICBjb25zdCByYyA9IHZlcnNpb24gPT09IDUgPyBwYWNrZXQucmVhc29uQ29kZSA6IHBhY2tldC5yZXR1cm5Db2RlO1xuICAgIGlmICh2ZXJzaW9uICE9PSA1KSB7XG4gICAgICAgIGNvbnN0IGVyciA9IG5ldyBzaGFyZWRfMS5FcnJvcldpdGhSZWFzb25Db2RlKGBQcm90b2NvbCBlcnJvcjogQXV0aCBwYWNrZXRzIGFyZSBvbmx5IHN1cHBvcnRlZCBpbiBNUVRUIDUuIFlvdXIgdmVyc2lvbjoke3ZlcnNpb259YCwgcmMpO1xuICAgICAgICBjbGllbnQuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNsaWVudC5oYW5kbGVBdXRoKHBhY2tldCwgKGVyciwgcGFja2V0MikgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICBjbGllbnQuZW1pdCgnZXJyb3InLCBlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyYyA9PT0gMjQpIHtcbiAgICAgICAgICAgIGNsaWVudC5yZWNvbm5lY3RpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGNsaWVudFsnX3NlbmRQYWNrZXQnXShwYWNrZXQyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGVycm9yID0gbmV3IHNoYXJlZF8xLkVycm9yV2l0aFJlYXNvbkNvZGUoYENvbm5lY3Rpb24gcmVmdXNlZDogJHthY2tfMS5SZWFzb25Db2Rlc1tyY119YCwgcmMpO1xuICAgICAgICAgICAgY2xpZW50LmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFuZGxlQXV0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/handlers/auth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/handlers/connack.js":
/*!*********************************************************!*\
  !*** ./node_modules/mqtt/build/lib/handlers/connack.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst ack_1 = __webpack_require__(/*! ./ack */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/ack.js\");\nconst topic_alias_send_1 = __importDefault(__webpack_require__(/*! ../topic-alias-send */ \"(ssr)/./node_modules/mqtt/build/lib/topic-alias-send.js\"));\nconst shared_1 = __webpack_require__(/*! ../shared */ \"(ssr)/./node_modules/mqtt/build/lib/shared.js\");\nconst handleConnack = (client, packet) => {\n    client.log('_handleConnack');\n    const { options } = client;\n    const version = options.protocolVersion;\n    const rc = version === 5 ? packet.reasonCode : packet.returnCode;\n    clearTimeout(client['connackTimer']);\n    delete client['topicAliasSend'];\n    if (packet.properties) {\n        if (packet.properties.topicAliasMaximum) {\n            if (packet.properties.topicAliasMaximum > 0xffff) {\n                client.emit('error', new Error('topicAliasMaximum from broker is out of range'));\n                return;\n            }\n            if (packet.properties.topicAliasMaximum > 0) {\n                client['topicAliasSend'] = new topic_alias_send_1.default(packet.properties.topicAliasMaximum);\n            }\n        }\n        if (packet.properties.serverKeepAlive && options.keepalive) {\n            options.keepalive = packet.properties.serverKeepAlive;\n            client['_shiftPingInterval']();\n        }\n        if (packet.properties.maximumPacketSize) {\n            if (!options.properties) {\n                options.properties = {};\n            }\n            options.properties.maximumPacketSize =\n                packet.properties.maximumPacketSize;\n        }\n    }\n    if (rc === 0) {\n        client.reconnecting = false;\n        client['_onConnect'](packet);\n    }\n    else if (rc > 0) {\n        const err = new shared_1.ErrorWithReasonCode(`Connection refused: ${ack_1.ReasonCodes[rc]}`, rc);\n        client.emit('error', err);\n    }\n};\nexports[\"default\"] = handleConnack;\n//# sourceMappingURL=connack.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaGFuZGxlcnMvY29ubmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWMsbUJBQU8sQ0FBQyxrRUFBTztBQUM3QiwyQ0FBMkMsbUJBQU8sQ0FBQyxvRkFBcUI7QUFDeEUsaUJBQWlCLG1CQUFPLENBQUMsZ0VBQVc7QUFDcEM7QUFDQTtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSxzQkFBc0I7QUFDbEc7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9oYW5kbGVycy9jb25uYWNrLmpzPzM0MmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhY2tfMSA9IHJlcXVpcmUoXCIuL2Fja1wiKTtcbmNvbnN0IHRvcGljX2FsaWFzX3NlbmRfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi4vdG9waWMtYWxpYXMtc2VuZFwiKSk7XG5jb25zdCBzaGFyZWRfMSA9IHJlcXVpcmUoXCIuLi9zaGFyZWRcIik7XG5jb25zdCBoYW5kbGVDb25uYWNrID0gKGNsaWVudCwgcGFja2V0KSA9PiB7XG4gICAgY2xpZW50LmxvZygnX2hhbmRsZUNvbm5hY2snKTtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IGNsaWVudDtcbiAgICBjb25zdCB2ZXJzaW9uID0gb3B0aW9ucy5wcm90b2NvbFZlcnNpb247XG4gICAgY29uc3QgcmMgPSB2ZXJzaW9uID09PSA1ID8gcGFja2V0LnJlYXNvbkNvZGUgOiBwYWNrZXQucmV0dXJuQ29kZTtcbiAgICBjbGVhclRpbWVvdXQoY2xpZW50Wydjb25uYWNrVGltZXInXSk7XG4gICAgZGVsZXRlIGNsaWVudFsndG9waWNBbGlhc1NlbmQnXTtcbiAgICBpZiAocGFja2V0LnByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKHBhY2tldC5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtKSB7XG4gICAgICAgICAgICBpZiAocGFja2V0LnByb3BlcnRpZXMudG9waWNBbGlhc01heGltdW0gPiAweGZmZmYpIHtcbiAgICAgICAgICAgICAgICBjbGllbnQuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ3RvcGljQWxpYXNNYXhpbXVtIGZyb20gYnJva2VyIGlzIG91dCBvZiByYW5nZScpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocGFja2V0LnByb3BlcnRpZXMudG9waWNBbGlhc01heGltdW0gPiAwKSB7XG4gICAgICAgICAgICAgICAgY2xpZW50Wyd0b3BpY0FsaWFzU2VuZCddID0gbmV3IHRvcGljX2FsaWFzX3NlbmRfMS5kZWZhdWx0KHBhY2tldC5wcm9wZXJ0aWVzLnRvcGljQWxpYXNNYXhpbXVtKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAocGFja2V0LnByb3BlcnRpZXMuc2VydmVyS2VlcEFsaXZlICYmIG9wdGlvbnMua2VlcGFsaXZlKSB7XG4gICAgICAgICAgICBvcHRpb25zLmtlZXBhbGl2ZSA9IHBhY2tldC5wcm9wZXJ0aWVzLnNlcnZlcktlZXBBbGl2ZTtcbiAgICAgICAgICAgIGNsaWVudFsnX3NoaWZ0UGluZ0ludGVydmFsJ10oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFja2V0LnByb3BlcnRpZXMubWF4aW11bVBhY2tldFNpemUpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5wcm9wZXJ0aWVzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLnByb3BlcnRpZXMubWF4aW11bVBhY2tldFNpemUgPVxuICAgICAgICAgICAgICAgIHBhY2tldC5wcm9wZXJ0aWVzLm1heGltdW1QYWNrZXRTaXplO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyYyA9PT0gMCkge1xuICAgICAgICBjbGllbnQucmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIGNsaWVudFsnX29uQ29ubmVjdCddKHBhY2tldCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJjID4gMCkge1xuICAgICAgICBjb25zdCBlcnIgPSBuZXcgc2hhcmVkXzEuRXJyb3JXaXRoUmVhc29uQ29kZShgQ29ubmVjdGlvbiByZWZ1c2VkOiAke2Fja18xLlJlYXNvbkNvZGVzW3JjXX1gLCByYyk7XG4gICAgICAgIGNsaWVudC5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgfVxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGhhbmRsZUNvbm5hY2s7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25uYWNrLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/handlers/connack.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/handlers/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/mqtt/build/lib/handlers/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst publish_1 = __importDefault(__webpack_require__(/*! ./publish */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/publish.js\"));\nconst auth_1 = __importDefault(__webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/auth.js\"));\nconst connack_1 = __importDefault(__webpack_require__(/*! ./connack */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/connack.js\"));\nconst ack_1 = __importDefault(__webpack_require__(/*! ./ack */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/ack.js\"));\nconst pubrel_1 = __importDefault(__webpack_require__(/*! ./pubrel */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/pubrel.js\"));\nconst handle = (client, packet, done) => {\n    const { options } = client;\n    if (options.protocolVersion === 5 &&\n        options.properties &&\n        options.properties.maximumPacketSize &&\n        options.properties.maximumPacketSize < packet.length) {\n        client.emit('error', new Error(`exceeding packets size ${packet.cmd}`));\n        client.end({\n            reasonCode: 149,\n            properties: { reasonString: 'Maximum packet size was exceeded' },\n        });\n        return client;\n    }\n    client.log('_handlePacket :: emitting packetreceive');\n    client.emit('packetreceive', packet);\n    switch (packet.cmd) {\n        case 'publish':\n            (0, publish_1.default)(client, packet, done);\n            break;\n        case 'puback':\n        case 'pubrec':\n        case 'pubcomp':\n        case 'suback':\n        case 'unsuback':\n            (0, ack_1.default)(client, packet);\n            done();\n            break;\n        case 'pubrel':\n            (0, pubrel_1.default)(client, packet, done);\n            break;\n        case 'connack':\n            (0, connack_1.default)(client, packet);\n            done();\n            break;\n        case 'auth':\n            (0, auth_1.default)(client, packet);\n            done();\n            break;\n        case 'pingresp':\n            client.pingResp = true;\n            done();\n            break;\n        case 'disconnect':\n            client.emit('disconnect', packet);\n            done();\n            break;\n        default:\n            client.log('_handlePacket :: unknown command');\n            done();\n            break;\n    }\n};\nexports[\"default\"] = handle;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaGFuZGxlcnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsbUJBQU8sQ0FBQywwRUFBVztBQUNyRCwrQkFBK0IsbUJBQU8sQ0FBQyxvRUFBUTtBQUMvQyxrQ0FBa0MsbUJBQU8sQ0FBQywwRUFBVztBQUNyRCw4QkFBOEIsbUJBQU8sQ0FBQyxrRUFBTztBQUM3QyxpQ0FBaUMsbUJBQU8sQ0FBQyx3RUFBVTtBQUNuRDtBQUNBLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSxXQUFXO0FBQzVFO0FBQ0E7QUFDQSwwQkFBMEIsa0RBQWtEO0FBQzVFLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9oYW5kbGVycy9pbmRleC5qcz9mNjhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcHVibGlzaF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3B1Ymxpc2hcIikpO1xuY29uc3QgYXV0aF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2F1dGhcIikpO1xuY29uc3QgY29ubmFja18xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2Nvbm5hY2tcIikpO1xuY29uc3QgYWNrXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYWNrXCIpKTtcbmNvbnN0IHB1YnJlbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3B1YnJlbFwiKSk7XG5jb25zdCBoYW5kbGUgPSAoY2xpZW50LCBwYWNrZXQsIGRvbmUpID0+IHtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IGNsaWVudDtcbiAgICBpZiAob3B0aW9ucy5wcm90b2NvbFZlcnNpb24gPT09IDUgJiZcbiAgICAgICAgb3B0aW9ucy5wcm9wZXJ0aWVzICYmXG4gICAgICAgIG9wdGlvbnMucHJvcGVydGllcy5tYXhpbXVtUGFja2V0U2l6ZSAmJlxuICAgICAgICBvcHRpb25zLnByb3BlcnRpZXMubWF4aW11bVBhY2tldFNpemUgPCBwYWNrZXQubGVuZ3RoKSB7XG4gICAgICAgIGNsaWVudC5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcihgZXhjZWVkaW5nIHBhY2tldHMgc2l6ZSAke3BhY2tldC5jbWR9YCkpO1xuICAgICAgICBjbGllbnQuZW5kKHtcbiAgICAgICAgICAgIHJlYXNvbkNvZGU6IDE0OSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgcmVhc29uU3RyaW5nOiAnTWF4aW11bSBwYWNrZXQgc2l6ZSB3YXMgZXhjZWVkZWQnIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2xpZW50O1xuICAgIH1cbiAgICBjbGllbnQubG9nKCdfaGFuZGxlUGFja2V0IDo6IGVtaXR0aW5nIHBhY2tldHJlY2VpdmUnKTtcbiAgICBjbGllbnQuZW1pdCgncGFja2V0cmVjZWl2ZScsIHBhY2tldCk7XG4gICAgc3dpdGNoIChwYWNrZXQuY21kKSB7XG4gICAgICAgIGNhc2UgJ3B1Ymxpc2gnOlxuICAgICAgICAgICAgKDAsIHB1Ymxpc2hfMS5kZWZhdWx0KShjbGllbnQsIHBhY2tldCwgZG9uZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncHViYWNrJzpcbiAgICAgICAgY2FzZSAncHVicmVjJzpcbiAgICAgICAgY2FzZSAncHViY29tcCc6XG4gICAgICAgIGNhc2UgJ3N1YmFjayc6XG4gICAgICAgIGNhc2UgJ3Vuc3ViYWNrJzpcbiAgICAgICAgICAgICgwLCBhY2tfMS5kZWZhdWx0KShjbGllbnQsIHBhY2tldCk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAncHVicmVsJzpcbiAgICAgICAgICAgICgwLCBwdWJyZWxfMS5kZWZhdWx0KShjbGllbnQsIHBhY2tldCwgZG9uZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnY29ubmFjayc6XG4gICAgICAgICAgICAoMCwgY29ubmFja18xLmRlZmF1bHQpKGNsaWVudCwgcGFja2V0KTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdhdXRoJzpcbiAgICAgICAgICAgICgwLCBhdXRoXzEuZGVmYXVsdCkoY2xpZW50LCBwYWNrZXQpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BpbmdyZXNwJzpcbiAgICAgICAgICAgIGNsaWVudC5waW5nUmVzcCA9IHRydWU7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZGlzY29ubmVjdCc6XG4gICAgICAgICAgICBjbGllbnQuZW1pdCgnZGlzY29ubmVjdCcsIHBhY2tldCk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNsaWVudC5sb2coJ19oYW5kbGVQYWNrZXQgOjogdW5rbm93biBjb21tYW5kJyk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFuZGxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/handlers/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/handlers/publish.js":
/*!*********************************************************!*\
  !*** ./node_modules/mqtt/build/lib/handlers/publish.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst validReasonCodes = [0, 16, 128, 131, 135, 144, 145, 151, 153];\nconst handlePublish = (client, packet, done) => {\n    client.log('handlePublish: packet %o', packet);\n    done = typeof done !== 'undefined' ? done : client.noop;\n    let topic = packet.topic.toString();\n    const message = packet.payload;\n    const { qos } = packet;\n    const { messageId } = packet;\n    const { options } = client;\n    if (client.options.protocolVersion === 5) {\n        let alias;\n        if (packet.properties) {\n            alias = packet.properties.topicAlias;\n        }\n        if (typeof alias !== 'undefined') {\n            if (topic.length === 0) {\n                if (alias > 0 && alias <= 0xffff) {\n                    const gotTopic = client['topicAliasRecv'].getTopicByAlias(alias);\n                    if (gotTopic) {\n                        topic = gotTopic;\n                        client.log('handlePublish :: topic complemented by alias. topic: %s - alias: %d', topic, alias);\n                    }\n                    else {\n                        client.log('handlePublish :: unregistered topic alias. alias: %d', alias);\n                        client.emit('error', new Error('Received unregistered Topic Alias'));\n                        return;\n                    }\n                }\n                else {\n                    client.log('handlePublish :: topic alias out of range. alias: %d', alias);\n                    client.emit('error', new Error('Received Topic Alias is out of range'));\n                    return;\n                }\n            }\n            else if (client['topicAliasRecv'].put(topic, alias)) {\n                client.log('handlePublish :: registered topic: %s - alias: %d', topic, alias);\n            }\n            else {\n                client.log('handlePublish :: topic alias out of range. alias: %d', alias);\n                client.emit('error', new Error('Received Topic Alias is out of range'));\n                return;\n            }\n        }\n    }\n    client.log('handlePublish: qos %d', qos);\n    switch (qos) {\n        case 2: {\n            options.customHandleAcks(topic, message, packet, (error, code) => {\n                if (typeof error === 'number') {\n                    code = error;\n                    error = null;\n                }\n                if (error) {\n                    return client.emit('error', error);\n                }\n                if (validReasonCodes.indexOf(code) === -1) {\n                    return client.emit('error', new Error('Wrong reason code for pubrec'));\n                }\n                if (code) {\n                    client['_sendPacket']({ cmd: 'pubrec', messageId, reasonCode: code }, done);\n                }\n                else {\n                    client.incomingStore.put(packet, () => {\n                        client['_sendPacket']({ cmd: 'pubrec', messageId }, done);\n                    });\n                }\n            });\n            break;\n        }\n        case 1: {\n            options.customHandleAcks(topic, message, packet, (error, code) => {\n                if (typeof error === 'number') {\n                    code = error;\n                    error = null;\n                }\n                if (error) {\n                    return client.emit('error', error);\n                }\n                if (validReasonCodes.indexOf(code) === -1) {\n                    return client.emit('error', new Error('Wrong reason code for puback'));\n                }\n                if (!code) {\n                    client.emit('message', topic, message, packet);\n                }\n                client.handleMessage(packet, (err) => {\n                    if (err) {\n                        return done && done(err);\n                    }\n                    client['_sendPacket']({ cmd: 'puback', messageId, reasonCode: code }, done);\n                });\n            });\n            break;\n        }\n        case 0:\n            client.emit('message', topic, message, packet);\n            client.handleMessage(packet, done);\n            break;\n        default:\n            client.log('handlePublish: unknown QoS. Doing nothing.');\n            break;\n    }\n};\nexports[\"default\"] = handlePublish;\n//# sourceMappingURL=publish.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaGFuZGxlcnMvcHVibGlzaC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLE1BQU07QUFDbEIsWUFBWSxZQUFZO0FBQ3hCLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLDRDQUE0QztBQUN4RjtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsMEJBQTBCO0FBQzFFLHFCQUFxQjtBQUNyQjtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsNENBQTRDO0FBQ3hGLGlCQUFpQjtBQUNqQixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pb3RfY2hlY2svLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaGFuZGxlcnMvcHVibGlzaC5qcz9iNDY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdmFsaWRSZWFzb25Db2RlcyA9IFswLCAxNiwgMTI4LCAxMzEsIDEzNSwgMTQ0LCAxNDUsIDE1MSwgMTUzXTtcbmNvbnN0IGhhbmRsZVB1Ymxpc2ggPSAoY2xpZW50LCBwYWNrZXQsIGRvbmUpID0+IHtcbiAgICBjbGllbnQubG9nKCdoYW5kbGVQdWJsaXNoOiBwYWNrZXQgJW8nLCBwYWNrZXQpO1xuICAgIGRvbmUgPSB0eXBlb2YgZG9uZSAhPT0gJ3VuZGVmaW5lZCcgPyBkb25lIDogY2xpZW50Lm5vb3A7XG4gICAgbGV0IHRvcGljID0gcGFja2V0LnRvcGljLnRvU3RyaW5nKCk7XG4gICAgY29uc3QgbWVzc2FnZSA9IHBhY2tldC5wYXlsb2FkO1xuICAgIGNvbnN0IHsgcW9zIH0gPSBwYWNrZXQ7XG4gICAgY29uc3QgeyBtZXNzYWdlSWQgfSA9IHBhY2tldDtcbiAgICBjb25zdCB7IG9wdGlvbnMgfSA9IGNsaWVudDtcbiAgICBpZiAoY2xpZW50Lm9wdGlvbnMucHJvdG9jb2xWZXJzaW9uID09PSA1KSB7XG4gICAgICAgIGxldCBhbGlhcztcbiAgICAgICAgaWYgKHBhY2tldC5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBhbGlhcyA9IHBhY2tldC5wcm9wZXJ0aWVzLnRvcGljQWxpYXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBhbGlhcyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIGlmICh0b3BpYy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoYWxpYXMgPiAwICYmIGFsaWFzIDw9IDB4ZmZmZikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBnb3RUb3BpYyA9IGNsaWVudFsndG9waWNBbGlhc1JlY3YnXS5nZXRUb3BpY0J5QWxpYXMoYWxpYXMpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZ290VG9waWMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcGljID0gZ290VG9waWM7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnQubG9nKCdoYW5kbGVQdWJsaXNoIDo6IHRvcGljIGNvbXBsZW1lbnRlZCBieSBhbGlhcy4gdG9waWM6ICVzIC0gYWxpYXM6ICVkJywgdG9waWMsIGFsaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudC5sb2coJ2hhbmRsZVB1Ymxpc2ggOjogdW5yZWdpc3RlcmVkIHRvcGljIGFsaWFzLiBhbGlhczogJWQnLCBhbGlhcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnQuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ1JlY2VpdmVkIHVucmVnaXN0ZXJlZCBUb3BpYyBBbGlhcycpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LmxvZygnaGFuZGxlUHVibGlzaCA6OiB0b3BpYyBhbGlhcyBvdXQgb2YgcmFuZ2UuIGFsaWFzOiAlZCcsIGFsaWFzKTtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdSZWNlaXZlZCBUb3BpYyBBbGlhcyBpcyBvdXQgb2YgcmFuZ2UnKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjbGllbnRbJ3RvcGljQWxpYXNSZWN2J10ucHV0KHRvcGljLCBhbGlhcykpIHtcbiAgICAgICAgICAgICAgICBjbGllbnQubG9nKCdoYW5kbGVQdWJsaXNoIDo6IHJlZ2lzdGVyZWQgdG9waWM6ICVzIC0gYWxpYXM6ICVkJywgdG9waWMsIGFsaWFzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNsaWVudC5sb2coJ2hhbmRsZVB1Ymxpc2ggOjogdG9waWMgYWxpYXMgb3V0IG9mIHJhbmdlLiBhbGlhczogJWQnLCBhbGlhcyk7XG4gICAgICAgICAgICAgICAgY2xpZW50LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdSZWNlaXZlZCBUb3BpYyBBbGlhcyBpcyBvdXQgb2YgcmFuZ2UnKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNsaWVudC5sb2coJ2hhbmRsZVB1Ymxpc2g6IHFvcyAlZCcsIHFvcyk7XG4gICAgc3dpdGNoIChxb3MpIHtcbiAgICAgICAgY2FzZSAyOiB7XG4gICAgICAgICAgICBvcHRpb25zLmN1c3RvbUhhbmRsZUFja3ModG9waWMsIG1lc3NhZ2UsIHBhY2tldCwgKGVycm9yLCBjb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRSZWFzb25Db2Rlcy5pbmRleE9mKGNvZGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdXcm9uZyByZWFzb24gY29kZSBmb3IgcHVicmVjJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29kZSkge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnRbJ19zZW5kUGFja2V0J10oeyBjbWQ6ICdwdWJyZWMnLCBtZXNzYWdlSWQsIHJlYXNvbkNvZGU6IGNvZGUgfSwgZG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjbGllbnQuaW5jb21pbmdTdG9yZS5wdXQocGFja2V0LCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRbJ19zZW5kUGFja2V0J10oeyBjbWQ6ICdwdWJyZWMnLCBtZXNzYWdlSWQgfSwgZG9uZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAxOiB7XG4gICAgICAgICAgICBvcHRpb25zLmN1c3RvbUhhbmRsZUFja3ModG9waWMsIG1lc3NhZ2UsIHBhY2tldCwgKGVycm9yLCBjb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9IGVycm9yO1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmVtaXQoJ2Vycm9yJywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodmFsaWRSZWFzb25Db2Rlcy5pbmRleE9mKGNvZGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdXcm9uZyByZWFzb24gY29kZSBmb3IgcHViYWNrJykpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWNvZGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpZW50LmVtaXQoJ21lc3NhZ2UnLCB0b3BpYywgbWVzc2FnZSwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2xpZW50LmhhbmRsZU1lc3NhZ2UocGFja2V0LCAoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkb25lICYmIGRvbmUoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjbGllbnRbJ19zZW5kUGFja2V0J10oeyBjbWQ6ICdwdWJhY2snLCBtZXNzYWdlSWQsIHJlYXNvbkNvZGU6IGNvZGUgfSwgZG9uZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNsaWVudC5lbWl0KCdtZXNzYWdlJywgdG9waWMsIG1lc3NhZ2UsIHBhY2tldCk7XG4gICAgICAgICAgICBjbGllbnQuaGFuZGxlTWVzc2FnZShwYWNrZXQsIGRvbmUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBjbGllbnQubG9nKCdoYW5kbGVQdWJsaXNoOiB1bmtub3duIFFvUy4gRG9pbmcgbm90aGluZy4nKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbn07XG5leHBvcnRzLmRlZmF1bHQgPSBoYW5kbGVQdWJsaXNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVibGlzaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/handlers/publish.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/handlers/pubrel.js":
/*!********************************************************!*\
  !*** ./node_modules/mqtt/build/lib/handlers/pubrel.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst handlePubrel = (client, packet, done) => {\n    client.log('handling pubrel packet');\n    const callback = typeof done !== 'undefined' ? done : client.noop;\n    const { messageId } = packet;\n    const comp = { cmd: 'pubcomp', messageId };\n    client.incomingStore.get(packet, (err, pub) => {\n        if (!err) {\n            client.emit('message', pub.topic, pub.payload, pub);\n            client.handleMessage(pub, (err2) => {\n                if (err2) {\n                    return callback(err2);\n                }\n                client.incomingStore.del(pub, client.noop);\n                client['_sendPacket'](comp, callback);\n            });\n        }\n        else {\n            client['_sendPacket'](comp, callback);\n        }\n    });\n};\nexports[\"default\"] = handlePubrel;\n//# sourceMappingURL=pubrel.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaGFuZGxlcnMvcHVicmVsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLFlBQVksWUFBWTtBQUN4QixtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9oYW5kbGVycy9wdWJyZWwuanM/ZWZmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGhhbmRsZVB1YnJlbCA9IChjbGllbnQsIHBhY2tldCwgZG9uZSkgPT4ge1xuICAgIGNsaWVudC5sb2coJ2hhbmRsaW5nIHB1YnJlbCBwYWNrZXQnKTtcbiAgICBjb25zdCBjYWxsYmFjayA9IHR5cGVvZiBkb25lICE9PSAndW5kZWZpbmVkJyA/IGRvbmUgOiBjbGllbnQubm9vcDtcbiAgICBjb25zdCB7IG1lc3NhZ2VJZCB9ID0gcGFja2V0O1xuICAgIGNvbnN0IGNvbXAgPSB7IGNtZDogJ3B1YmNvbXAnLCBtZXNzYWdlSWQgfTtcbiAgICBjbGllbnQuaW5jb21pbmdTdG9yZS5nZXQocGFja2V0LCAoZXJyLCBwdWIpID0+IHtcbiAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgIGNsaWVudC5lbWl0KCdtZXNzYWdlJywgcHViLnRvcGljLCBwdWIucGF5bG9hZCwgcHViKTtcbiAgICAgICAgICAgIGNsaWVudC5oYW5kbGVNZXNzYWdlKHB1YiwgKGVycjIpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyMikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyMik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNsaWVudC5pbmNvbWluZ1N0b3JlLmRlbChwdWIsIGNsaWVudC5ub29wKTtcbiAgICAgICAgICAgICAgICBjbGllbnRbJ19zZW5kUGFja2V0J10oY29tcCwgY2FsbGJhY2spO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjbGllbnRbJ19zZW5kUGFja2V0J10oY29tcCwgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gaGFuZGxlUHVicmVsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVicmVsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/handlers/pubrel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/is-browser.js":
/*!***************************************************!*\
  !*** ./node_modules/mqtt/build/lib/is-browser.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nexports[\"default\"] = isBrowser;\n//# sourceMappingURL=is-browser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaXMtYnJvd3Nlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pb3RfY2hlY2svLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvaXMtYnJvd3Nlci5qcz9iODkzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCc7XG5leHBvcnRzLmRlZmF1bHQgPSBpc0Jyb3dzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/is-browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/shared.js":
/*!***********************************************!*\
  !*** ./node_modules/mqtt/build/lib/shared.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.applyMixin = exports.ErrorWithReasonCode = void 0;\nclass ErrorWithReasonCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n        Object.setPrototypeOf(this, ErrorWithReasonCode.prototype);\n        Object.getPrototypeOf(this).name = 'ErrorWithReasonCode';\n    }\n}\nexports.ErrorWithReasonCode = ErrorWithReasonCode;\nfunction applyMixin(target, mixin, includeConstructor = false) {\n    var _a;\n    const inheritanceChain = [mixin];\n    while (true) {\n        const current = inheritanceChain[0];\n        const base = Object.getPrototypeOf(current);\n        if (base === null || base === void 0 ? void 0 : base.prototype) {\n            inheritanceChain.unshift(base);\n        }\n        else {\n            break;\n        }\n    }\n    for (const ctor of inheritanceChain) {\n        for (const prop of Object.getOwnPropertyNames(ctor.prototype)) {\n            if (includeConstructor || prop !== 'constructor') {\n                Object.defineProperty(target.prototype, prop, (_a = Object.getOwnPropertyDescriptor(ctor.prototype, prop)) !== null && _a !== void 0 ? _a : Object.create(null));\n            }\n        }\n    }\n}\nexports.applyMixin = applyMixin;\n//# sourceMappingURL=shared.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvc2hhcmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQixHQUFHLDJCQUEyQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9zaGFyZWQuanM/NGNmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXBwbHlNaXhpbiA9IGV4cG9ydHMuRXJyb3JXaXRoUmVhc29uQ29kZSA9IHZvaWQgMDtcbmNsYXNzIEVycm9yV2l0aFJlYXNvbkNvZGUgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgY29kZSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKHRoaXMsIEVycm9yV2l0aFJlYXNvbkNvZGUucHJvdG90eXBlKTtcbiAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLm5hbWUgPSAnRXJyb3JXaXRoUmVhc29uQ29kZSc7XG4gICAgfVxufVxuZXhwb3J0cy5FcnJvcldpdGhSZWFzb25Db2RlID0gRXJyb3JXaXRoUmVhc29uQ29kZTtcbmZ1bmN0aW9uIGFwcGx5TWl4aW4odGFyZ2V0LCBtaXhpbiwgaW5jbHVkZUNvbnN0cnVjdG9yID0gZmFsc2UpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgaW5oZXJpdGFuY2VDaGFpbiA9IFttaXhpbl07XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGluaGVyaXRhbmNlQ2hhaW5bMF07XG4gICAgICAgIGNvbnN0IGJhc2UgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoY3VycmVudCk7XG4gICAgICAgIGlmIChiYXNlID09PSBudWxsIHx8IGJhc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJhc2UucHJvdG90eXBlKSB7XG4gICAgICAgICAgICBpbmhlcml0YW5jZUNoYWluLnVuc2hpZnQoYmFzZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGN0b3Igb2YgaW5oZXJpdGFuY2VDaGFpbikge1xuICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoY3Rvci5wcm90b3R5cGUpKSB7XG4gICAgICAgICAgICBpZiAoaW5jbHVkZUNvbnN0cnVjdG9yIHx8IHByb3AgIT09ICdjb25zdHJ1Y3RvcicpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LnByb3RvdHlwZSwgcHJvcCwgKF9hID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjdG9yLnByb3RvdHlwZSwgcHJvcCkpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5hcHBseU1peGluID0gYXBwbHlNaXhpbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNoYXJlZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/shared.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/store.js":
/*!**********************************************!*\
  !*** ./node_modules/mqtt/build/lib/store.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst readable_stream_1 = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/lib/ours/index.js\");\nconst streamsOpts = { objectMode: true };\nconst defaultStoreOptions = {\n    clean: true,\n};\nclass Store {\n    constructor(options) {\n        this.options = options || {};\n        this.options = Object.assign(Object.assign({}, defaultStoreOptions), options);\n        this._inflights = new Map();\n    }\n    put(packet, cb) {\n        this._inflights.set(packet.messageId, packet);\n        if (cb) {\n            cb();\n        }\n        return this;\n    }\n    createStream() {\n        const stream = new readable_stream_1.Readable(streamsOpts);\n        const values = [];\n        let destroyed = false;\n        let i = 0;\n        this._inflights.forEach((value, key) => {\n            values.push(value);\n        });\n        stream._read = () => {\n            if (!destroyed && i < values.length) {\n                stream.push(values[i++]);\n            }\n            else {\n                stream.push(null);\n            }\n        };\n        stream.destroy = (err) => {\n            if (destroyed) {\n                return;\n            }\n            destroyed = true;\n            setTimeout(() => {\n                stream.emit('close');\n            }, 0);\n            return stream;\n        };\n        return stream;\n    }\n    del(packet, cb) {\n        const toDelete = this._inflights.get(packet.messageId);\n        if (toDelete) {\n            this._inflights.delete(packet.messageId);\n            cb(null, toDelete);\n        }\n        else if (cb) {\n            cb(new Error('missing packet'));\n        }\n        return this;\n    }\n    get(packet, cb) {\n        const storedPacket = this._inflights.get(packet.messageId);\n        if (storedPacket) {\n            cb(null, storedPacket);\n        }\n        else if (cb) {\n            cb(new Error('missing packet'));\n        }\n        return this;\n    }\n    close(cb) {\n        if (this.options.clean) {\n            this._inflights = null;\n        }\n        if (cb) {\n            cb();\n        }\n    }\n}\nexports[\"default\"] = Store;\n//# sourceMappingURL=store.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvc3RvcmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLG1CQUFPLENBQUMsK0VBQWlCO0FBQ25ELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi9zdG9yZS5qcz9hZTFmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgcmVhZGFibGVfc3RyZWFtXzEgPSByZXF1aXJlKFwicmVhZGFibGUtc3RyZWFtXCIpO1xuY29uc3Qgc3RyZWFtc09wdHMgPSB7IG9iamVjdE1vZGU6IHRydWUgfTtcbmNvbnN0IGRlZmF1bHRTdG9yZU9wdGlvbnMgPSB7XG4gICAgY2xlYW46IHRydWUsXG59O1xuY2xhc3MgU3RvcmUge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0U3RvcmVPcHRpb25zKSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMuX2luZmxpZ2h0cyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgcHV0KHBhY2tldCwgY2IpIHtcbiAgICAgICAgdGhpcy5faW5mbGlnaHRzLnNldChwYWNrZXQubWVzc2FnZUlkLCBwYWNrZXQpO1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGNyZWF0ZVN0cmVhbSgpIHtcbiAgICAgICAgY29uc3Qgc3RyZWFtID0gbmV3IHJlYWRhYmxlX3N0cmVhbV8xLlJlYWRhYmxlKHN0cmVhbXNPcHRzKTtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gW107XG4gICAgICAgIGxldCBkZXN0cm95ZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICB0aGlzLl9pbmZsaWdodHMuZm9yRWFjaCgodmFsdWUsIGtleSkgPT4ge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2godmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgc3RyZWFtLl9yZWFkID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFkZXN0cm95ZWQgJiYgaSA8IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucHVzaCh2YWx1ZXNbaSsrXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdHJlYW0ucHVzaChudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc3RyZWFtLmRlc3Ryb3kgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoZGVzdHJveWVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHN0cmVhbS5lbWl0KCdjbG9zZScpO1xuICAgICAgICAgICAgfSwgMCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc3RyZWFtO1xuICAgIH1cbiAgICBkZWwocGFja2V0LCBjYikge1xuICAgICAgICBjb25zdCB0b0RlbGV0ZSA9IHRoaXMuX2luZmxpZ2h0cy5nZXQocGFja2V0Lm1lc3NhZ2VJZCk7XG4gICAgICAgIGlmICh0b0RlbGV0ZSkge1xuICAgICAgICAgICAgdGhpcy5faW5mbGlnaHRzLmRlbGV0ZShwYWNrZXQubWVzc2FnZUlkKTtcbiAgICAgICAgICAgIGNiKG51bGwsIHRvRGVsZXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjYikge1xuICAgICAgICAgICAgY2IobmV3IEVycm9yKCdtaXNzaW5nIHBhY2tldCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0KHBhY2tldCwgY2IpIHtcbiAgICAgICAgY29uc3Qgc3RvcmVkUGFja2V0ID0gdGhpcy5faW5mbGlnaHRzLmdldChwYWNrZXQubWVzc2FnZUlkKTtcbiAgICAgICAgaWYgKHN0b3JlZFBhY2tldCkge1xuICAgICAgICAgICAgY2IobnVsbCwgc3RvcmVkUGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjYikge1xuICAgICAgICAgICAgY2IobmV3IEVycm9yKCdtaXNzaW5nIHBhY2tldCcpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgY2xvc2UoY2IpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGVhbikge1xuICAgICAgICAgICAgdGhpcy5faW5mbGlnaHRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICAgIGNiKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBTdG9yZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0b3JlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/store.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/topic-alias-recv.js":
/*!*********************************************************!*\
  !*** ./node_modules/mqtt/build/lib/topic-alias-recv.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nclass TopicAliasRecv {\n    constructor(max) {\n        this.aliasToTopic = {};\n        this.max = max;\n    }\n    put(topic, alias) {\n        if (alias === 0 || alias > this.max) {\n            return false;\n        }\n        this.aliasToTopic[alias] = topic;\n        this.length = Object.keys(this.aliasToTopic).length;\n        return true;\n    }\n    getTopicByAlias(alias) {\n        return this.aliasToTopic[alias];\n    }\n    clear() {\n        this.aliasToTopic = {};\n    }\n}\nexports[\"default\"] = TopicAliasRecv;\n//# sourceMappingURL=topic-alias-recv.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvdG9waWMtYWxpYXMtcmVjdi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2lvdF9jaGVjay8uL25vZGVfbW9kdWxlcy9tcXR0L2J1aWxkL2xpYi90b3BpYy1hbGlhcy1yZWN2LmpzPzEwMjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jbGFzcyBUb3BpY0FsaWFzUmVjdiB7XG4gICAgY29uc3RydWN0b3IobWF4KSB7XG4gICAgICAgIHRoaXMuYWxpYXNUb1RvcGljID0ge307XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuICAgIH1cbiAgICBwdXQodG9waWMsIGFsaWFzKSB7XG4gICAgICAgIGlmIChhbGlhcyA9PT0gMCB8fCBhbGlhcyA+IHRoaXMubWF4KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbGlhc1RvVG9waWNbYWxpYXNdID0gdG9waWM7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gT2JqZWN0LmtleXModGhpcy5hbGlhc1RvVG9waWMpLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGdldFRvcGljQnlBbGlhcyhhbGlhcykge1xuICAgICAgICByZXR1cm4gdGhpcy5hbGlhc1RvVG9waWNbYWxpYXNdO1xuICAgIH1cbiAgICBjbGVhcigpIHtcbiAgICAgICAgdGhpcy5hbGlhc1RvVG9waWMgPSB7fTtcbiAgICB9XG59XG5leHBvcnRzLmRlZmF1bHQgPSBUb3BpY0FsaWFzUmVjdjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRvcGljLWFsaWFzLXJlY3YuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/topic-alias-recv.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/topic-alias-send.js":
/*!*********************************************************!*\
  !*** ./node_modules/mqtt/build/lib/topic-alias-send.js ***!
  \*********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst lru_cache_1 = __importDefault(__webpack_require__(/*! lru-cache */ \"(ssr)/./node_modules/mqtt/node_modules/lru-cache/index.js\"));\nconst number_allocator_1 = __webpack_require__(/*! number-allocator */ \"(ssr)/./node_modules/number-allocator/index.js\");\nclass TopicAliasSend {\n    constructor(max) {\n        if (max > 0) {\n            this.aliasToTopic = new lru_cache_1.default({ max });\n            this.topicToAlias = {};\n            this.numberAllocator = new number_allocator_1.NumberAllocator(1, max);\n            this.max = max;\n            this.length = 0;\n        }\n    }\n    put(topic, alias) {\n        if (alias === 0 || alias > this.max) {\n            return false;\n        }\n        const entry = this.aliasToTopic.get(alias);\n        if (entry) {\n            delete this.topicToAlias[entry];\n        }\n        this.aliasToTopic.set(alias, topic);\n        this.topicToAlias[topic] = alias;\n        this.numberAllocator.use(alias);\n        this.length = this.aliasToTopic.size;\n        return true;\n    }\n    getTopicByAlias(alias) {\n        return this.aliasToTopic.get(alias);\n    }\n    getAliasByTopic(topic) {\n        const alias = this.topicToAlias[topic];\n        if (typeof alias !== 'undefined') {\n            this.aliasToTopic.get(alias);\n        }\n        return alias;\n    }\n    clear() {\n        this.aliasToTopic.clear();\n        this.topicToAlias = {};\n        this.numberAllocator.clear();\n        this.length = 0;\n    }\n    getLruAlias() {\n        const alias = this.numberAllocator.firstVacant();\n        if (alias)\n            return alias;\n        return [...this.aliasToTopic.keys()][this.aliasToTopic.size - 1];\n    }\n}\nexports[\"default\"] = TopicAliasSend;\n//# sourceMappingURL=topic-alias-send.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvdG9waWMtYWxpYXMtc2VuZC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxtQkFBTyxDQUFDLDRFQUFXO0FBQ3ZELDJCQUEyQixtQkFBTyxDQUFDLHdFQUFrQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQSwwREFBMEQsS0FBSztBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pb3RfY2hlY2svLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvdG9waWMtYWxpYXMtc2VuZC5qcz8yMzQ5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbHJ1X2NhY2hlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImxydS1jYWNoZVwiKSk7XG5jb25zdCBudW1iZXJfYWxsb2NhdG9yXzEgPSByZXF1aXJlKFwibnVtYmVyLWFsbG9jYXRvclwiKTtcbmNsYXNzIFRvcGljQWxpYXNTZW5kIHtcbiAgICBjb25zdHJ1Y3RvcihtYXgpIHtcbiAgICAgICAgaWYgKG1heCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYWxpYXNUb1RvcGljID0gbmV3IGxydV9jYWNoZV8xLmRlZmF1bHQoeyBtYXggfSk7XG4gICAgICAgICAgICB0aGlzLnRvcGljVG9BbGlhcyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5udW1iZXJBbGxvY2F0b3IgPSBuZXcgbnVtYmVyX2FsbG9jYXRvcl8xLk51bWJlckFsbG9jYXRvcigxLCBtYXgpO1xuICAgICAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHV0KHRvcGljLCBhbGlhcykge1xuICAgICAgICBpZiAoYWxpYXMgPT09IDAgfHwgYWxpYXMgPiB0aGlzLm1heCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGVudHJ5ID0gdGhpcy5hbGlhc1RvVG9waWMuZ2V0KGFsaWFzKTtcbiAgICAgICAgaWYgKGVudHJ5KSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy50b3BpY1RvQWxpYXNbZW50cnldO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWxpYXNUb1RvcGljLnNldChhbGlhcywgdG9waWMpO1xuICAgICAgICB0aGlzLnRvcGljVG9BbGlhc1t0b3BpY10gPSBhbGlhcztcbiAgICAgICAgdGhpcy5udW1iZXJBbGxvY2F0b3IudXNlKGFsaWFzKTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmFsaWFzVG9Ub3BpYy5zaXplO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgZ2V0VG9waWNCeUFsaWFzKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsaWFzVG9Ub3BpYy5nZXQoYWxpYXMpO1xuICAgIH1cbiAgICBnZXRBbGlhc0J5VG9waWModG9waWMpIHtcbiAgICAgICAgY29uc3QgYWxpYXMgPSB0aGlzLnRvcGljVG9BbGlhc1t0b3BpY107XG4gICAgICAgIGlmICh0eXBlb2YgYWxpYXMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICB0aGlzLmFsaWFzVG9Ub3BpYy5nZXQoYWxpYXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGlhcztcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuYWxpYXNUb1RvcGljLmNsZWFyKCk7XG4gICAgICAgIHRoaXMudG9waWNUb0FsaWFzID0ge307XG4gICAgICAgIHRoaXMubnVtYmVyQWxsb2NhdG9yLmNsZWFyKCk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgZ2V0THJ1QWxpYXMoKSB7XG4gICAgICAgIGNvbnN0IGFsaWFzID0gdGhpcy5udW1iZXJBbGxvY2F0b3IuZmlyc3RWYWNhbnQoKTtcbiAgICAgICAgaWYgKGFsaWFzKVxuICAgICAgICAgICAgcmV0dXJuIGFsaWFzO1xuICAgICAgICByZXR1cm4gWy4uLnRoaXMuYWxpYXNUb1RvcGljLmtleXMoKV1bdGhpcy5hbGlhc1RvVG9waWMuc2l6ZSAtIDFdO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFRvcGljQWxpYXNTZW5kO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9waWMtYWxpYXMtc2VuZC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/topic-alias-send.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/unique-message-id-provider.js":
/*!*******************************************************************!*\
  !*** ./node_modules/mqtt/build/lib/unique-message-id-provider.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst number_allocator_1 = __webpack_require__(/*! number-allocator */ \"(ssr)/./node_modules/number-allocator/index.js\");\nclass UniqueMessageIdProvider {\n    constructor() {\n        this.numberAllocator = new number_allocator_1.NumberAllocator(1, 65535);\n    }\n    allocate() {\n        this.lastId = this.numberAllocator.alloc();\n        return this.lastId;\n    }\n    getLastAllocated() {\n        return this.lastId;\n    }\n    register(messageId) {\n        return this.numberAllocator.use(messageId);\n    }\n    deallocate(messageId) {\n        this.numberAllocator.free(messageId);\n    }\n    clear() {\n        this.numberAllocator.clear();\n    }\n}\nexports[\"default\"] = UniqueMessageIdProvider;\n//# sourceMappingURL=unique-message-id-provider.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvdW5pcXVlLW1lc3NhZ2UtaWQtcHJvdmlkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLG1CQUFPLENBQUMsd0VBQWtCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFlO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pb3RfY2hlY2svLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvdW5pcXVlLW1lc3NhZ2UtaWQtcHJvdmlkZXIuanM/NWNiOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IG51bWJlcl9hbGxvY2F0b3JfMSA9IHJlcXVpcmUoXCJudW1iZXItYWxsb2NhdG9yXCIpO1xuY2xhc3MgVW5pcXVlTWVzc2FnZUlkUHJvdmlkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm51bWJlckFsbG9jYXRvciA9IG5ldyBudW1iZXJfYWxsb2NhdG9yXzEuTnVtYmVyQWxsb2NhdG9yKDEsIDY1NTM1KTtcbiAgICB9XG4gICAgYWxsb2NhdGUoKSB7XG4gICAgICAgIHRoaXMubGFzdElkID0gdGhpcy5udW1iZXJBbGxvY2F0b3IuYWxsb2MoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubGFzdElkO1xuICAgIH1cbiAgICBnZXRMYXN0QWxsb2NhdGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0SWQ7XG4gICAgfVxuICAgIHJlZ2lzdGVyKG1lc3NhZ2VJZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJBbGxvY2F0b3IudXNlKG1lc3NhZ2VJZCk7XG4gICAgfVxuICAgIGRlYWxsb2NhdGUobWVzc2FnZUlkKSB7XG4gICAgICAgIHRoaXMubnVtYmVyQWxsb2NhdG9yLmZyZWUobWVzc2FnZUlkKTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMubnVtYmVyQWxsb2NhdG9yLmNsZWFyKCk7XG4gICAgfVxufVxuZXhwb3J0cy5kZWZhdWx0ID0gVW5pcXVlTWVzc2FnZUlkUHJvdmlkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11bmlxdWUtbWVzc2FnZS1pZC1wcm92aWRlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/unique-message-id-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/lib/validations.js":
/*!****************************************************!*\
  !*** ./node_modules/mqtt/build/lib/validations.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.validateTopics = exports.validateTopic = void 0;\nfunction validateTopic(topic) {\n    const parts = topic.split('/');\n    for (let i = 0; i < parts.length; i++) {\n        if (parts[i] === '+') {\n            continue;\n        }\n        if (parts[i] === '#') {\n            return i === parts.length - 1;\n        }\n        if (parts[i].indexOf('+') !== -1 || parts[i].indexOf('#') !== -1) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.validateTopic = validateTopic;\nfunction validateTopics(topics) {\n    if (topics.length === 0) {\n        return 'empty_topic_list';\n    }\n    for (let i = 0; i < topics.length; i++) {\n        if (!validateTopic(topics[i])) {\n            return topics[i];\n        }\n    }\n    return null;\n}\nexports.validateTopics = validateTopics;\n//# sourceMappingURL=validations.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9saWIvdmFsaWRhdGlvbnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcscUJBQXFCO0FBQzlDO0FBQ0E7QUFDQSxvQkFBb0Isa0JBQWtCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW90X2NoZWNrLy4vbm9kZV9tb2R1bGVzL21xdHQvYnVpbGQvbGliL3ZhbGlkYXRpb25zLmpzPzc4NTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlVG9waWNzID0gZXhwb3J0cy52YWxpZGF0ZVRvcGljID0gdm9pZCAwO1xuZnVuY3Rpb24gdmFsaWRhdGVUb3BpYyh0b3BpYykge1xuICAgIGNvbnN0IHBhcnRzID0gdG9waWMuc3BsaXQoJy8nKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwYXJ0c1tpXSA9PT0gJysnKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydHNbaV0gPT09ICcjJykge1xuICAgICAgICAgICAgcmV0dXJuIGkgPT09IHBhcnRzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcnRzW2ldLmluZGV4T2YoJysnKSAhPT0gLTEgfHwgcGFydHNbaV0uaW5kZXhPZignIycpICE9PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZXhwb3J0cy52YWxpZGF0ZVRvcGljID0gdmFsaWRhdGVUb3BpYztcbmZ1bmN0aW9uIHZhbGlkYXRlVG9waWNzKHRvcGljcykge1xuICAgIGlmICh0b3BpY3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnZW1wdHlfdG9waWNfbGlzdCc7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9waWNzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghdmFsaWRhdGVUb3BpYyh0b3BpY3NbaV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9waWNzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuZXhwb3J0cy52YWxpZGF0ZVRvcGljcyA9IHZhbGlkYXRlVG9waWNzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmFsaWRhdGlvbnMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/lib/validations.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/build/mqtt.js":
/*!*****************************************!*\
  !*** ./node_modules/mqtt/build/mqtt.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ReasonCodes = exports.UniqueMessageIdProvider = exports.DefaultMessageIdProvider = exports.Store = exports.MqttClient = exports.connectAsync = exports.connect = exports.Client = void 0;\nconst client_1 = __importDefault(__webpack_require__(/*! ./lib/client */ \"(ssr)/./node_modules/mqtt/build/lib/client.js\"));\nexports.MqttClient = client_1.default;\nconst default_message_id_provider_1 = __importDefault(__webpack_require__(/*! ./lib/default-message-id-provider */ \"(ssr)/./node_modules/mqtt/build/lib/default-message-id-provider.js\"));\nexports.DefaultMessageIdProvider = default_message_id_provider_1.default;\nconst unique_message_id_provider_1 = __importDefault(__webpack_require__(/*! ./lib/unique-message-id-provider */ \"(ssr)/./node_modules/mqtt/build/lib/unique-message-id-provider.js\"));\nexports.UniqueMessageIdProvider = unique_message_id_provider_1.default;\nconst store_1 = __importDefault(__webpack_require__(/*! ./lib/store */ \"(ssr)/./node_modules/mqtt/build/lib/store.js\"));\nexports.Store = store_1.default;\nconst connect_1 = __importStar(__webpack_require__(/*! ./lib/connect */ \"(ssr)/./node_modules/mqtt/build/lib/connect/index.js\"));\nexports.connect = connect_1.default;\nObject.defineProperty(exports, \"connectAsync\", ({ enumerable: true, get: function () { return connect_1.connectAsync; } }));\nexports.Client = client_1.default;\n__exportStar(__webpack_require__(/*! ./lib/client */ \"(ssr)/./node_modules/mqtt/build/lib/client.js\"), exports);\n__exportStar(__webpack_require__(/*! ./lib/shared */ \"(ssr)/./node_modules/mqtt/build/lib/shared.js\"), exports);\nvar ack_1 = __webpack_require__(/*! ./lib/handlers/ack */ \"(ssr)/./node_modules/mqtt/build/lib/handlers/ack.js\");\nObject.defineProperty(exports, \"ReasonCodes\", ({ enumerable: true, get: function () { return ack_1.ReasonCodes; } }));\n//# sourceMappingURL=mqtt.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbXF0dC9idWlsZC9tcXR0LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQixHQUFHLCtCQUErQixHQUFHLGdDQUFnQyxHQUFHLGFBQWEsR0FBRyxrQkFBa0IsR0FBRyxvQkFBb0IsR0FBRyxlQUFlLEdBQUcsY0FBYztBQUN2TCxpQ0FBaUMsbUJBQU8sQ0FBQyxtRUFBYztBQUN2RCxrQkFBa0I7QUFDbEIsc0RBQXNELG1CQUFPLENBQUMsNkdBQW1DO0FBQ2pHLGdDQUFnQztBQUNoQyxxREFBcUQsbUJBQU8sQ0FBQywyR0FBa0M7QUFDL0YsK0JBQStCO0FBQy9CLGdDQUFnQyxtQkFBTyxDQUFDLGlFQUFhO0FBQ3JELGFBQWE7QUFDYiwrQkFBK0IsbUJBQU8sQ0FBQywyRUFBZTtBQUN0RCxlQUFlO0FBQ2YsZ0RBQStDLEVBQUUscUNBQXFDLGtDQUFrQyxFQUFDO0FBQ3pILGNBQWM7QUFDZCxhQUFhLG1CQUFPLENBQUMsbUVBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLG1FQUFjO0FBQ25DLFlBQVksbUJBQU8sQ0FBQywrRUFBb0I7QUFDeEMsK0NBQThDLEVBQUUscUNBQXFDLDZCQUE2QixFQUFDO0FBQ25IIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaW90X2NoZWNrLy4vbm9kZV9tb2R1bGVzL21xdHQvYnVpbGQvbXF0dC5qcz8xNWJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5SZWFzb25Db2RlcyA9IGV4cG9ydHMuVW5pcXVlTWVzc2FnZUlkUHJvdmlkZXIgPSBleHBvcnRzLkRlZmF1bHRNZXNzYWdlSWRQcm92aWRlciA9IGV4cG9ydHMuU3RvcmUgPSBleHBvcnRzLk1xdHRDbGllbnQgPSBleHBvcnRzLmNvbm5lY3RBc3luYyA9IGV4cG9ydHMuY29ubmVjdCA9IGV4cG9ydHMuQ2xpZW50ID0gdm9pZCAwO1xuY29uc3QgY2xpZW50XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbGliL2NsaWVudFwiKSk7XG5leHBvcnRzLk1xdHRDbGllbnQgPSBjbGllbnRfMS5kZWZhdWx0O1xuY29uc3QgZGVmYXVsdF9tZXNzYWdlX2lkX3Byb3ZpZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vbGliL2RlZmF1bHQtbWVzc2FnZS1pZC1wcm92aWRlclwiKSk7XG5leHBvcnRzLkRlZmF1bHRNZXNzYWdlSWRQcm92aWRlciA9IGRlZmF1bHRfbWVzc2FnZV9pZF9wcm92aWRlcl8xLmRlZmF1bHQ7XG5jb25zdCB1bmlxdWVfbWVzc2FnZV9pZF9wcm92aWRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2xpYi91bmlxdWUtbWVzc2FnZS1pZC1wcm92aWRlclwiKSk7XG5leHBvcnRzLlVuaXF1ZU1lc3NhZ2VJZFByb3ZpZGVyID0gdW5pcXVlX21lc3NhZ2VfaWRfcHJvdmlkZXJfMS5kZWZhdWx0O1xuY29uc3Qgc3RvcmVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9saWIvc3RvcmVcIikpO1xuZXhwb3J0cy5TdG9yZSA9IHN0b3JlXzEuZGVmYXVsdDtcbmNvbnN0IGNvbm5lY3RfMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9saWIvY29ubmVjdFwiKSk7XG5leHBvcnRzLmNvbm5lY3QgPSBjb25uZWN0XzEuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNvbm5lY3RBc3luY1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29ubmVjdF8xLmNvbm5lY3RBc3luYzsgfSB9KTtcbmV4cG9ydHMuQ2xpZW50ID0gY2xpZW50XzEuZGVmYXVsdDtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9saWIvY2xpZW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9saWIvc2hhcmVkXCIpLCBleHBvcnRzKTtcbnZhciBhY2tfMSA9IHJlcXVpcmUoXCIuL2xpYi9oYW5kbGVycy9hY2tcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJSZWFzb25Db2Rlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYWNrXzEuUmVhc29uQ29kZXM7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tcXR0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/build/mqtt.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mqtt/node_modules/lru-cache/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/mqtt/node_modules/lru-cache/index.js ***!
  \***********************************************************/
/***/ ((module) => {

eval("const perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst hasAbortController = typeof AbortController === 'function'\n\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController\n  ? AbortController\n  : class AbortController {\n      constructor() {\n        this.signal = new AS()\n      }\n      abort(reason = new Error('This operation was aborted')) {\n        this.signal.reason = this.signal.reason || reason\n        this.signal.aborted = true\n        this.signal.dispatchEvent({\n          type: 'abort',\n          target: this.signal,\n        })\n      }\n    }\n\nconst hasAbortSignal = typeof AbortSignal === 'function'\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function'\nconst AS = hasAbortSignal\n  ? AbortSignal\n  : hasACAbortSignal\n  ? AC.AbortController\n  : class AbortSignal {\n      constructor() {\n        this.reason = undefined\n        this.aborted = false\n        this._listeners = []\n      }\n      dispatchEvent(e) {\n        if (e.type === 'abort') {\n          this.aborted = true\n          this.onabort(e)\n          this._listeners.forEach(f => f(e), this)\n        }\n      }\n      onabort() {}\n      addEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners.push(fn)\n        }\n      }\n      removeEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners = this._listeners.filter(f => f !== fn)\n        }\n      }\n    }\n\nconst warned = new Set()\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache)\n  }\n}\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, method)\n    warn(code, `${method} method`, `cache.${instead}()`, get)\n  }\n}\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, field)\n    warn(code, `${field} property`, `cache.${instead}`, get)\n  }\n}\n\nconst emitWarning = (...a) => {\n  typeof process === 'object' &&\n  process &&\n  typeof process.emitWarning === 'function'\n    ? process.emitWarning(...a)\n    : console.error(...a)\n}\n\nconst shouldWarn = code => !warned.has(code)\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code)\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`\n  emitWarning(msg, 'DeprecationWarning', code, fn)\n}\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size)\n    this.fill(0)\n  }\n}\n\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return []\n    }\n    const UintArray = getUintArray(max)\n    this.heap = new UintArray(max)\n    this.length = 0\n  }\n  push(n) {\n    this.heap[this.length++] = n\n  }\n  pop() {\n    return this.heap[--this.length]\n  }\n}\n\nclass LRUCache {\n  constructor(options = {}) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const { length, maxAge, stale } =\n      options instanceof LRUCache ? {} : options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.max = max\n    this.maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.maxSize\n    this.sizeCalculation = sizeCalculation || length\n    if (this.sizeCalculation) {\n      if (!this.maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n\n    this.fetchContext = fetchContext\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError(\n        'cannot set fetchContext without fetchMethod'\n      )\n    }\n\n    this.keyMap = new Map()\n    this.keyList = new Array(max).fill(null)\n    this.valList = new Array(max).fill(null)\n    this.next = new UintArray(max)\n    this.prev = new UintArray(max)\n    this.head = 0\n    this.tail = 0\n    this.free = new Stack(max)\n    this.initialFill = 1\n    this.size = 0\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter\n      this.disposed = []\n    } else {\n      this.disposeAfter = null\n      this.disposed = null\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.maxSize !== 0) {\n        if (!isPosInt(this.maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale || !!stale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || maxAge || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale')\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl')\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation')\n    }\n  }\n\n  getRemainingTTL(key) {\n    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0\n  }\n\n  initializeTTLTracking() {\n    this.ttls = new ZeroArray(this.max)\n    this.starts = new ZeroArray(this.max)\n\n    this.setItemTTL = (index, ttl, start = perf.now()) => {\n      this.starts[index] = ttl !== 0 ? start : 0\n      this.ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.isStale(index)) {\n            this.delete(this.keyList[index])\n          }\n        }, ttl + 1)\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n    }\n\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.statusTTL = (status, index) => {\n      if (status) {\n        status.ttl = this.ttls[index]\n        status.start = this.starts[index]\n        status.now = cachedNow || getNow()\n        status.remainingTTL = status.now + status.ttl - status.start\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0\n        ? Infinity\n        : this.starts[index] +\n            this.ttls[index] -\n            (cachedNow || getNow())\n    }\n\n    this.isStale = index => {\n      return (\n        this.ttls[index] !== 0 &&\n        this.starts[index] !== 0 &&\n        (cachedNow || getNow()) - this.starts[index] >\n          this.ttls[index]\n      )\n    }\n  }\n  updateItemAge(_index) {}\n  statusTTL(_status, _index) {}\n  setItemTTL(_index, _ttl, _start) {}\n  isStale(_index) {\n    return false\n  }\n\n  initializeSizeTracking() {\n    this.calculatedSize = 0\n    this.sizes = new ZeroArray(this.max)\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index]\n      this.sizes[index] = 0\n    }\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation or size ' +\n              'must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.addItemSize = (index, size, status) => {\n      this.sizes[index] = size\n      if (this.maxSize) {\n        const maxSize = this.maxSize - this.sizes[index]\n        while (this.calculatedSize > maxSize) {\n          this.evict(true)\n        }\n      }\n      this.calculatedSize += this.sizes[index]\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.calculatedSize\n      }\n    }\n  }\n  removeItemSize(_index) {}\n  addItemSize(_index, _size) {}\n  requireSize(_k, _v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n  }\n\n  *indexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.tail; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.head) {\n          break\n        } else {\n          i = this.prev[i]\n        }\n      }\n    }\n  }\n\n  *rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.head; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.tail) {\n          break\n        } else {\n          i = this.next[i]\n        }\n      }\n    }\n  }\n\n  isValidIndex(index) {\n    return (\n      index !== undefined &&\n      this.keyMap.get(this.keyList[index]) === index\n    )\n  }\n\n  *entries() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n  *rentries() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n\n  *keys() {\n    for (const i of this.indexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n\n  *values() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  find(fn, getOptions) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions)\n      }\n    }\n  }\n\n  forEach(fn, thisp = this) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  rforEach(fn, thisp = this) {\n    for (const i of this.rindexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale')\n    return this.purgeStale\n  }\n\n  purgeStale() {\n    let deleted = false\n    for (const i of this.rindexes({ allowStale: true })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i])\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  dump() {\n    const arr = []\n    for (const i of this.indexes({ allowStale: true })) {\n      const key = this.keyList[i]\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      const entry = { value }\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.starts[i]\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  load(arr) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  dispose(_v, _k, _reason) {}\n\n  set(\n    k,\n    v,\n    {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      status,\n    } = {}\n  ) {\n    size = this.requireSize(k, v, size, sizeCalculation)\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case a background fetch is there already.\n      // in non-async cases, this is a no-op\n      this.delete(k)\n      return this\n    }\n    let index = this.size === 0 ? undefined : this.keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = this.newIndex()\n      this.keyList[index] = k\n      this.valList[index] = v\n      this.keyMap.set(k, index)\n      this.next[this.tail] = index\n      this.prev[index] = this.tail\n      this.tail = index\n      this.size++\n      this.addItemSize(index, size, status)\n      if (status) {\n        status.set = 'add'\n      }\n      noUpdateTTL = false\n    } else {\n      // update\n      this.moveToTail(index)\n      const oldVal = this.valList[index]\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set')\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set'])\n            }\n          }\n        }\n        this.removeItemSize(index)\n        this.valList[index] = v\n        this.addItemSize(index, size, status)\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking()\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start)\n    }\n    this.statusTTL(status, index)\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return this\n  }\n\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail\n    }\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false)\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop()\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++\n  }\n\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head]\n      this.evict(true)\n      return val\n    }\n  }\n\n  evict(free) {\n    const head = this.head\n    const k = this.keyList[head]\n    const v = this.valList[head]\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else {\n      this.dispose(v, k, 'evict')\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict'])\n      }\n    }\n    this.removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.keyList[head] = null\n      this.valList[head] = null\n      this.free.push(head)\n    }\n    this.head = this.next[head]\n    this.keyMap.delete(k)\n    this.size--\n    return head\n  }\n\n  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index)\n        }\n        if (status) status.has = 'hit'\n        this.statusTTL(status, index)\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek(k, { allowStale = this.allowStale } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index]\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    }\n  }\n\n  backgroundFetch(k, index, options, context) {\n    const v = index === undefined ? undefined : this.valList[index]\n    if (this.isBackgroundFetch(v)) {\n      return v\n    }\n    const ac = new AC()\n    if (options.signal) {\n      options.signal.addEventListener('abort', () =>\n        ac.abort(options.signal.reason)\n      )\n    }\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n    const cb = (v, updateCache = false) => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      if (this.valList[index] === p) {\n        if (v === undefined) {\n          if (p.__staleWhileFetching) {\n            this.valList[index] = p.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n    const eb = er => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n    const fetchFail = er => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      if (this.valList[index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || p.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.valList[index] = p.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && p.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return p.__staleWhileFetching\n      } else if (p.__returned === p) {\n        throw er\n      }\n    }\n    const pcall = (res, rej) => {\n      this.fetchMethod(k, v, fetchOpts).then(v => res(v), rej)\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res()\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    p.__abortController = ac\n    p.__staleWhileFetching = v\n    p.__returned = null\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, p, { ...fetchOpts.options, status: undefined })\n      index = this.keyMap.get(k)\n    } else {\n      this.valList[index] = p\n    }\n    return p\n  }\n\n  isBackgroundFetch(p) {\n    return (\n      p &&\n      typeof p === 'object' &&\n      typeof p.then === 'function' &&\n      Object.prototype.hasOwnProperty.call(\n        p,\n        '__staleWhileFetching'\n      ) &&\n      Object.prototype.hasOwnProperty.call(p, '__returned') &&\n      (p.__returned === p || p.__returned === null)\n    )\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch(\n    k,\n    {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      fetchContext = this.fetchContext,\n      forceRefresh = false,\n      status,\n      signal,\n    } = {}\n  ) {\n    if (!this.fetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        this.statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = hasStale && isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  get(\n    k,\n    {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = {}\n  ) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.valList[index]\n      const fetching = this.isBackgroundFetch(value)\n      this.statusTTL(status, index)\n      if (this.isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status) status.returnedStale = allowStale\n          return allowStale ? value : undefined\n        } else {\n          if (status) {\n            status.returnedStale =\n              allowStale && value.__staleWhileFetching !== undefined\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  connect(p, n) {\n    this.prev[n] = p\n    this.next[p] = n\n  }\n\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index]\n      } else {\n        this.connect(this.prev[index], this.next[index])\n      }\n      this.connect(this.tail, index)\n      this.tail = index\n    }\n  }\n\n  get del() {\n    deprecatedMethod('del', 'delete')\n    return this.delete\n  }\n\n  delete(k) {\n    let deleted = false\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.size === 1) {\n          this.clear()\n        } else {\n          this.removeItemSize(index)\n          const v = this.valList[index]\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else {\n            this.dispose(v, k, 'delete')\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete'])\n            }\n          }\n          this.keyMap.delete(k)\n          this.keyList[index] = null\n          this.valList[index] = null\n          if (index === this.tail) {\n            this.tail = this.prev[index]\n          } else if (index === this.head) {\n            this.head = this.next[index]\n          } else {\n            this.next[this.prev[index]] = this.next[index]\n            this.prev[this.next[index]] = this.prev[index]\n          }\n          this.size--\n          this.free.push(index)\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return deleted\n  }\n\n  clear() {\n    for (const index of this.rindexes({ allowStale: true })) {\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.keyList[index]\n        this.dispose(v, k, 'delete')\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete'])\n        }\n      }\n    }\n\n    this.keyMap.clear()\n    this.valList.fill(null)\n    this.keyList.fill(null)\n    if (this.ttls) {\n      this.ttls.fill(0)\n      this.starts.fill(0)\n    }\n    if (this.sizes) {\n      this.sizes.fill(0)\n    }\n    this.head = 0\n    this.tail = 0\n    this.initialFill = 1\n    this.free.length = 0\n    this.calculatedSize = 0\n    this.size = 0\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n  }\n\n  get reset() {\n    deprecatedMethod('reset', 'clear')\n    return this.clear\n  }\n\n  get length() {\n    deprecatedProperty('length', 'size')\n    return this.size\n  }\n\n  static get AbortController() {\n    return AC\n  }\n  static get AbortSignal() {\n    return AS\n  }\n}\n\nmodule.exports = LRUCache\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mqtt/node_modules/lru-cache/index.js\n");

/***/ })

};
;